<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AJAX</title>
    <url>/2020/12/08/AJAX/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p> Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 </p>
<a id="more"></a>

<h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	$.ajax(&#123;键值对&#125;);</span><br><span class="line">	</span><br><span class="line">	常见键值对：</span><br><span class="line">		url:&quot;ajaxServlet&quot;,   &#x2F;&#x2F;请求路径</span><br><span class="line">		type:&quot;post&quot;,          &#x2F;&#x2F;请求方式</span><br><span class="line">		data：&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23 &#125;,  &#x2F;&#x2F;请求参数</span><br><span class="line">		success:function()&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;,      &#x2F;&#x2F;响应成功后执行回调函数</span><br><span class="line">		error：function()&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;	   &#x2F;&#x2F;请求响应出错，会执行回调函数</span><br><span class="line">		</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送get请求</span><br><span class="line">	语法：</span><br><span class="line">		$.get(url,[data],[callback],[type])</span><br><span class="line">			url:请求路径</span><br><span class="line">			data:请求参数</span><br><span class="line">			callback:回调函数</span><br><span class="line">			type:响应结果的类型</span><br></pre></td></tr></table></figure>

<h2 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发生post请求</span><br><span class="line">	语法：</span><br><span class="line">		$.post(url,[data],[callback],[type])</span><br><span class="line">			url:请求路径</span><br><span class="line">			data:请求参数</span><br><span class="line">			callback:回调函数</span><br><span class="line">			type:响应结果的类型</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/11/11/HTML/</url>
    <content><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h5 id="标签学习："><a href="#标签学习：" class="headerlink" title="标签学习："></a>标签学习：</h5><p>​                    <a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">文本标签：</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>:展示一条水平线</span><br><span class="line">	  属性：color:颜色</span><br><span class="line">		   width：宽度</span><br><span class="line">		   size：高度</span><br><span class="line">		   align：对齐方式</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>:字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>:字体斜体</span><br><span class="line"></span><br><span class="line">图片标签：</span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">alt:图片加载不出显示的文字</span><br><span class="line">./:代表当前目录</span><br><span class="line">../:代表上级目录</span><br><span class="line"></span><br><span class="line">列表标签：</span><br><span class="line">		<span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>:有序列表</span><br><span class="line">		<span class="tag">&lt;<span class="name">il</span>&gt;</span><span class="tag">&lt;/<span class="name">il</span>&gt;</span>:无序列表</span><br><span class="line"></span><br><span class="line">链接标签：</span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https.www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>:</span><br><span class="line">			属性：href:要跳转的页面</span><br><span class="line">				 target：_self 本窗口跳转 （默认值）</span><br><span class="line">						_blank 新开一个窗口跳转</span><br><span class="line"></span><br><span class="line">div和span：</span><br><span class="line">		div：块级标签	</span><br><span class="line">		span：行级标签</span><br><span class="line"></span><br><span class="line">表格标签：</span><br><span class="line">		table：定义表格</span><br><span class="line">		tr：定义行</span><br><span class="line">		td：定义单元格</span><br><span class="line">			rowspan:合并行</span><br><span class="line">			colspan:和并列                  </span><br><span class="line">		th：定义表头单元格</span><br><span class="line">		<span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span>:表格标题</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">表单标签：<span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>		</span><br><span class="line">			属性：action：指定提交数据的URL</span><br><span class="line">				 method：提交方式</span><br><span class="line">					get:</span><br><span class="line">						请求参数会在地址栏中显示</span><br><span class="line">						请求参数长度有限制</span><br><span class="line">						不太安全</span><br><span class="line">					post:</span><br><span class="line">						请求参数不会在地址栏显示，在请求体中</span><br><span class="line">						请求参数长度没有限制	</span><br><span class="line">						较为安全</span><br><span class="line"></span><br><span class="line">      表单中的数据需提交要指定name属性</span><br><span class="line">	</span><br><span class="line">    表单项标签：</span><br><span class="line">			input：通过type属性改变元素展示的样式</span><br><span class="line">				type属性：</span><br><span class="line">						text：文本输入框	</span><br><span class="line">							placeholder:提示信息</span><br><span class="line">						password：密码输入框</span><br><span class="line">						readio：单选框</span><br><span class="line">							多个单项选项单选，name属性一致</span><br><span class="line">							会给每个单选框提供value值</span><br><span class="line">						checkbox：复选框</span><br><span class="line">						file:文件选择框</span><br><span class="line"></span><br><span class="line">			select：下拉列表</span><br><span class="line">				<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择省份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			textarea:文本域</span><br><span class="line">		</span><br></pre></td></tr></table></figure>



<h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>1.介绍</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;公司简介&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;公司简介&lt;/h1&gt;</span><br><span class="line">&lt;hr color=<span class="string">&quot;yellow&quot;</span> size=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;font color=<span class="string">&quot;red&quot;</span>&gt;<span class="string">&quot;中关村黑马程序员训练营&quot;</span>&lt;<span class="regexp">/font&gt;是由&lt;i&gt;&lt;b&gt;传智播客&lt;/</span>b&gt;&lt;/i&gt;</span><br><span class="line">    联合中关村软件园、CSDN， 并委托传智播客进行教学实施的软件开发高端培训机构，致力于服务各大软件企业，解决当前软件开发技术飞速发展， 而企业招不到优秀人才的困扰。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    目前，“中关村黑马程序员训练营”已成长为行业“学员质量好、课程内容深、企业满意”的移动开发高端训练基地， 并被评为中关村软件园重点扶持人才企业。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    黑马程序员的学员多为大学毕业后，有理想、有梦想，想从事IT行业，而没有环境和机遇改变自己命运的年轻人。 黑马程序员的学员筛选制度，远比现在<span class="number">90</span>%以上的企业招聘流程更为严格。任何一名学员想成功入学“黑马程序员”， 必须经历长达<span class="number">2</span>个月的面试流程，这些流程中不仅包括严格的技术测试、自学能力测试，还包括性格测试、压力测试、 品德测试等等测试。毫不夸张地说，黑马程序员训练营所有学员都是精挑细选出来的。百里挑一的残酷筛选制度确 保学员质量，并降低企业的用人风险。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    中关村黑马程序员训练营不仅着重培养学员的基础理论知识，更注重培养项目实施管理能力，并密切关注技术革新， 不断引入先进的技术，研发更新技术课程，确保学员进入企业后不仅能独立从事开发工作，更能给企业带来新的技术体系和理念。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p &gt;</span><br><span class="line">    一直以来，黑马程序员以技术视角关注IT产业发展，以深度分享推进产业技术成长，致力于弘扬技术创新，倡导分享、 开放和协作，努力打造高质量的IT人才服务平台。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;hr color=<span class="string">&quot;yellow&quot;</span> size=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">&lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">    &lt;font color=<span class="string">&quot;#a9a9a9&quot;</span>&gt;</span><br><span class="line">        江苏传智播客教育科技股份有限公司</span><br><span class="line">    &lt;/font&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">    &lt;font color=<span class="string">&quot;#a9a9a9&quot;</span>&gt;</span><br><span class="line">        版权所有Copyright <span class="number">2006</span>-<span class="number">2018</span>, All Rights Reserved 苏ICP备<span class="number">16007882</span></span><br><span class="line">    &lt;/font&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>2.注册页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                用户名</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                用户名</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                Email</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                姓名</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                手机号</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                性别</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;men&quot;</span>&gt;</span>男</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;femen&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                出生日期</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                验证码</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checkedCode&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/verify_code.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">        &lt;tr &gt;</span><br><span class="line">            &lt;td  colspan=<span class="string">&quot;2&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter&amp;&amp;Listener</title>
    <url>/2020/12/01/Filter/</url>
    <content><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><p>用于完成通用操作，如：登入验证，统一编码处理，敏感字符过滤。。</p>
<a id="more"></a>

<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定义一个类，实现接口Filter</span><br><span class="line">2.复写方法</span><br><span class="line">3.配置拦截路径    </span><br><span class="line">    </span><br><span class="line">    @WebFilter(&quot;&#x2F;*&quot;)</span><br><span class="line">public class filterDemo implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        &#x2F;&#x2F;放行</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        System.out.println(&quot;过滤器被执行了.......&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>执行过滤器</span><br><span class="line"><span class="number">2.</span>执行放行后的资源</span><br><span class="line"><span class="number">3.</span>执行放行代码下的代码    </span><br></pre></td></tr></table></figure>

<h2 id="过滤器配置"><a href="#过滤器配置" class="headerlink" title="过滤器配置"></a>过滤器配置</h2><h3 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.具体资源路径： &#x2F;index.jsp  访问index.jsp被拦截</span><br><span class="line">2.拦截目录： &#x2F;user&#x2F;*  访问user下所有资源被拦截</span><br><span class="line">3.后缀名拦截： *.jsp  范文后缀名为jsp资源时</span><br><span class="line">4.拦截所有资源：&#x2F;*</span><br></pre></td></tr></table></figure>



<h3 id="拦截方式配置"><a href="#拦截方式配置" class="headerlink" title="拦截方式配置"></a>拦截方式配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置dispatcherTypes属性</span><br><span class="line">	1.request：默认值，浏览器直接访问资源</span><br><span class="line">	2.forward：转发访问资源</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="过滤器链-配置多个过滤器）"><a href="#过滤器链-配置多个过滤器）" class="headerlink" title="过滤器链(配置多个过滤器）"></a>过滤器链(配置多个过滤器）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤器先后顺序：</span><br><span class="line">	注解配置：按照字符串比较规则比较，值小的先执行</span><br><span class="line">	xml配置：&lt;filter-mapping&gt; 谁定义在上面，谁先执行</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">执行顺序:如果两个过滤器，过滤器1，过滤器2</span><br><span class="line">	1.过滤器1</span><br><span class="line">	2.过滤器2</span><br><span class="line">	3.资源</span><br><span class="line">	4.过滤器2</span><br><span class="line">	5.过滤器1</span><br><span class="line">	</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections</title>
    <url>/2020/11/02/Collections/</url>
    <content><![CDATA[<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>常用方法：</p>
<p>​            reverse(list):    反转数组；</p>
<p>​            shuffle(list):    对list集合随机排序</p>
<a id="more"></a>

<p>​            sort(list):    对集合排序</p>
<p>​            frequency(Collection,object):    返回指定集合中指定元素的出现次数</p>
<p>​            copy(List dest,List src):    将src中的内容复制到dest中；</p>
]]></content>
      <tags>
        <tag>集合 javase</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2020/10/21/HTTP/</url>
    <content><![CDATA[<h2 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h2><p>http/1.0：客户端与服务器连接后，只能获得一个web资源，断开连接</p>
<p>http/1.1:   客户端与服务器连接后，可以获得多个web资源，</p>
<a id="more"></a>

<h3 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h3><ul>
<li><p>get</p>
<p> 请求参数在url后</p>
<p> 请求url有长度限制</p>
<p> 不安全</p>
</li>
<li><p>post</p>
<p> 请求参数在请求体中</p>
<p> 请求url没长度限制</p>
<p> 相对安全</p>
<h3 id="请求数据："><a href="#请求数据：" class="headerlink" title="请求数据："></a>请求数据：</h3></li>
<li><p>请求行</p>
<p>请求方式 /请求url/请求协议/版本</p>
</li>
<li><p>请求头</p>
<p>user-agent：浏览器信息</p>
<p>referer：从哪来</p>
<p> 作用：防盗链</p>
<p>​            统计</p>
</li>
<li><p>请求空行  </p>
<p> 分割请求头和请求体</p>
</li>
<li><p>请求体</p>
<p> 封装post请求参数</p>
</li>
</ul>
<h3 id="requst："><a href="#requst：" class="headerlink" title="requst："></a>requst：</h3><p>​    </p>
<p> 1、请求消息方法：</p>
<p>​                 获取请求方式 ： getMethod()</p>
<p>​                 获取虚拟目录：  getContextPath()</p>
<p>​                 获取Servlet路径：getServletPath()</p>
<p>​                 获取请求URI：getRequestURI()</p>
<p>​    2、请求头方法：</p>
<p>​                 通过请求头的名称获取请求头的值： String getHeader(String name)<br>​ </p>
<pre><code>其他功能：
    1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数
        1. String getParameter(String name):根据参数名称获取参数值    username=zs&amp;password=123
        2. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称
        3. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合

        设置编码：request.setCharacterEncoding(&quot;utf-8&quot;);</code></pre>
<h4 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求转发：一种在服务器内部的资源跳转方式</span><br><span class="line">		1. 步骤：</span><br><span class="line">			1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">			2. 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </span><br><span class="line">		</span><br><span class="line">req.getRequestDispatcher(&quot;&#x2F;demo2&quot;).forward(req,resp);</span><br><span class="line">		2. 特点：</span><br><span class="line">			1. 浏览器地址栏路径不发生变化</span><br><span class="line">			2. 只能转发到当前服务器内部资源中。</span><br><span class="line">			3. 转发是一次请求</span><br></pre></td></tr></table></figure>



<h3 id="response："><a href="#response：" class="headerlink" title="response："></a>response：</h3><p>   1、响应行</p>
<p>​            协议/版本 响应状态码 状态码描述</p>
<pre><code>        状态码：
                1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码
                2. 2xx：成功。代表：200
                3. 3xx：重定向。代表：302(重定向)，304(访问缓存)
                4. 4xx：客户端错误。
                    * 代表：
                        * 404（请求路径没有对应的资源） 
                        * 405：请求方式没有对应的doXxx方法
                5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre>
<p>   2、响应头</p>
<pre><code>    1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式
    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据
            * in-line:默认值,在当前页面内打开
            * attachment;filename=xxx：以附件形式打开响应体。文件下载</code></pre>
<p>   3、响应空行</p>
<p>   4、响应体</p>
<p>方法：</p>
<p>​        设置状态码：setStatus(int sc)</p>
<p>​        设置响应头：setHeader(String name, String value) </p>
<p>​        简单的重定向方法：response.sendRedirect(“/day15/responseDemo2”);</p>
<p>forward 和  redirect 区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 重定向的特点:redirect</span><br><span class="line">	1. 地址栏发生变化</span><br><span class="line">	2. 重定向可以访问其他站点(服务器)的资源</span><br><span class="line">	3. 重定向是两次请求。不能使用request对象来共享数据</span><br><span class="line">* 转发的特点：forward</span><br><span class="line">	1. 转发地址栏路径不变</span><br><span class="line">	2. 转发只能访问当前服务器下的资源</span><br><span class="line">	3. 转发是一次请求，可以使用request对象来共享数据</span><br></pre></td></tr></table></figure>

<p>​    路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">绝对路径:</span><br><span class="line">    如：http:<span class="comment">//localhost/day15/responseDemo1</span></span><br><span class="line">	   /day15/responseDemo1	</span><br><span class="line">    使用规则：</span><br><span class="line">           给服务器用：不需要加虚拟目录</span><br><span class="line">           给客户端用：需要加虚拟目录</span><br><span class="line">        虚拟目录动态获取：requst.getContextPath();   </span><br><span class="line">相对路径：</span><br><span class="line">    如：./index.html</span><br><span class="line">           ./或者省略:当前路径</span><br><span class="line">           ../：向上退一级    </span><br><span class="line">               </span><br></pre></td></tr></table></figure>



<h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request域：一次请求的范围</span><br><span class="line">    <span class="number">1.</span>setAttribute(String name,Object obj) :存储数据</span><br><span class="line">    <span class="number">2.</span><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span>:获取数据</span></span><br><span class="line"><span class="function">    3.<span class="title">removeAttribute</span><span class="params">(String name)</span>:删除数据</span></span><br></pre></td></tr></table></figure>



<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="1-登录案例："><a href="#1-登录案例：" class="headerlink" title="1.登录案例："></a>1.登录案例：</h4>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用户登录案例需求：</span><br><span class="line">	<span class="number">1.</span>编写login.html登录页面</span><br><span class="line">		username &amp; password 两个输入框</span><br><span class="line">	<span class="number">2.</span>使用Druid数据库连接池技术,操作mysql，day14数据库中user表</span><br><span class="line">	<span class="number">3.</span>使用JdbcTemplate技术封装JDBC</span><br><span class="line">	<span class="number">4.</span>登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您</span><br><span class="line">	<span class="number">5.</span>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在登录页面输入用户名和密码</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/loginSer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        User user=<span class="keyword">new</span> User(username,password);</span><br><span class="line">        UserDao userdao=<span class="keyword">new</span> UserDao();</span><br><span class="line">        List login = userdao.login(user);</span><br><span class="line">        <span class="keyword">if</span> (login.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/FailServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/LoginServlet&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过使用JDBCTemplate查询数据库中是否存在对应的用户名和密码，并返回List返回对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> List <span class="title">login</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jt= <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream is = UserDao.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            pro.load(is);</span><br><span class="line">            DataSource da= DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">            jt = <span class="keyword">new</span> JdbcTemplate(da);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String  sql=<span class="string">&quot;select * from user where name=? and password=?&quot;</span>;</span><br><span class="line">         List&lt;Map&lt;String, Object&gt;&gt; users = jt.queryForList(sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="comment">//        System.out.println(users);</span></span><br><span class="line">         <span class="keyword">return</span> users;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成功后显示信息</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        Object username = req.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;欢迎回来&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//失败后显示信息</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/FailServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>页面输出乱码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>网站如何访问的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>输入域名</span><br><span class="line"><span class="number">2.</span>检查本机的hosts配置文件下有没有这个域名的映射</span><br><span class="line">    有：返回对应的ip地址，直接访问</span><br><span class="line">    没有：去DNS找 </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2020/12/08/JSON/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul>
<li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject  <strong>N</strong>otation）  </li>
<li>JSON 是轻量级的文本数据交换格式  </li>
<li>JSON 独立于语言 *  </li>
<li>JSON 具有自我描述性，更易理解 </li>
</ul>
<a id="more"></a>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据在名称&#x2F;值对中 </span><br><span class="line">数据由逗号分隔 </span><br><span class="line">花括号保存对象 </span><br><span class="line">方括号保存数组 </span><br></pre></td></tr></table></figure>

<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.json对象.键名</span><br><span class="line">2.json对象对象[&quot;键名&quot;]  ------&gt;遍历时使用</span><br><span class="line">3.数组对象[索引]</span><br></pre></td></tr></table></figure>

<h2 id="JSON对象转换"><a href="#JSON对象转换" class="headerlink" title="JSON对象转换"></a>JSON对象转换</h2><h3 id="java转为json"><a href="#java转为json" class="headerlink" title="java转为json"></a>java转为json</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.导入jar包</span><br><span class="line">2.创建Jackson核心对象ObjectMapper</span><br><span class="line">3.调用ObjectMapper的方法转换</span><br><span class="line">	writeValueAsString(obj):将对象转换为json字符串</span><br><span class="line"></span><br><span class="line">注解：</span><br><span class="line">	@JsonIgnore:排除属性</span><br><span class="line">	@JsonFormat：属性值格式化</span><br><span class="line">	</span><br><span class="line">List集合转换：</span><br><span class="line">	writeValueAsString(obj)----&gt;转出为数组[ ]</span><br><span class="line">Map集合转换：</span><br><span class="line">	writeValueAsString(obj)</span><br></pre></td></tr></table></figure>

<h3 id="json转为java"><a href="#json转为java" class="headerlink" title="json转为java"></a>json转为java</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readValue(json,Class)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JQurey</title>
    <url>/2020/12/04/JQurey/</url>
    <content><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><h2 id="js与jq对象转换"><a href="#js与jq对象转换" class="headerlink" title="js与jq对象转换"></a>js与jq对象转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.jq--&gt;js:jq对象[索引]，或者jq对象.get(索引)</span><br><span class="line"></span><br><span class="line">2.js--&gt;jq:$(js对象)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>作用：筛选具有相似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JQuery入口函数：dom文档加载完成后执行函数中的代码------&#x3D;window.onload</span><br><span class="line">	$(function()&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;);</span><br><span class="line">	window.onload定义多次，后面的会把前面的覆盖掉</span><br><span class="line">	$(function()可以定义多次</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.标签选择器：$(&quot;html标签名&quot;)</span><br><span class="line">2.id选择器:$(&quot;#id的属性值&quot;)</span><br><span class="line">3.类选择器：$(&quot;.class的属性值&quot;)</span><br><span class="line">4.并集选择器：$(&quot;选择器1，选择器2...&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后代选择器：$(&quot;A B&quot;)</span><br><span class="line">子代选择器：$(&quot;A &gt; B&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">属性名称选择器：</span><br><span class="line">	$(&quot;A[属性名]&quot;)</span><br><span class="line">属性选择器：	</span><br><span class="line">	$(&quot;A[属性名&#x3D;&#39;值&#39;]&quot;)</span><br><span class="line">复合属性选择器：</span><br><span class="line">	$(&quot;A[属性名&#x3D;&#39;值&#39;][]...&quot;)</span><br><span class="line">属性以__开始：</span><br><span class="line">	$(&quot;A[title^&#x3D;&quot;te&quot;]&quot;)</span><br><span class="line">属性以__结束：</span><br><span class="line">	$(&quot;A[title$&#x3D;&quot;te&quot;]&quot;)</span><br><span class="line">属性包含__：</span><br><span class="line">	$(&quot;A[title*&#x3D;&quot;te&quot;]&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首元素选择器：</span><br><span class="line">	元素:first</span><br><span class="line">尾元素选择器：</span><br><span class="line">	元素：last</span><br><span class="line">非元素选择器：</span><br><span class="line">	元素：not(selector)</span><br><span class="line">偶数选择器：</span><br><span class="line">	:even 偶数</span><br><span class="line">奇数选择器：</span><br><span class="line">	:odd 奇数</span><br><span class="line">等于索引选择器：</span><br><span class="line">	:eq(index)	</span><br><span class="line">大于索引选择器：</span><br><span class="line">	:gt(index)</span><br><span class="line">小于索引选择器：</span><br><span class="line">	:lt(index)    </span><br><span class="line">标题选择器：</span><br><span class="line">	：header</span><br></pre></td></tr></table></figure>

<h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.可用元素选择器：</span><br><span class="line">	：enabled</span><br><span class="line">2.不可用元素选择器：</span><br><span class="line">	：disable</span><br><span class="line">3.选中选择器：</span><br><span class="line">	：checked</span><br><span class="line">4.下拉列表选中选择器：</span><br><span class="line">	：selected</span><br></pre></td></tr></table></figure>

<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h3 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html():获取或设置元素的标签体内容  &lt;a&gt;&lt;font&gt;内容&lt;font&#x2F;&gt;&lt;a&#x2F;&gt;  -----&lt;font&gt;内容&lt;font&#x2F;&gt;</span><br><span class="line">text()::获取或设置元素的标签体纯文本内容  &lt;a&gt;&lt;font&gt;内容&lt;font&#x2F;&gt;&lt;a&#x2F;&gt;----内容</span><br><span class="line">val():获取或设置元素的value属性值</span><br></pre></td></tr></table></figure>

<h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><h4 id="通用属性操作"><a href="#通用属性操作" class="headerlink" title="通用属性操作"></a>通用属性操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">attr():获取或设置属性值</span><br><span class="line">removeAttr():删除属性值</span><br><span class="line">prop():获取或设置属性值</span><br><span class="line">removeprop():删除属性值</span><br><span class="line">固有属性使用prop </span><br><span class="line">自定义属性使用attr</span><br></pre></td></tr></table></figure>

<h4 id="对class属性操作"><a href="#对class属性操作" class="headerlink" title="对class属性操作"></a>对class属性操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addClass():添加class属性</span><br><span class="line">removeClass()：删除class属性</span><br><span class="line">toggleClass():切换class属性</span><br></pre></td></tr></table></figure>

<h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append():</span><br><span class="line">	对象1.append(对象2):将对象2添加到对象1内部，并且在末尾</span><br><span class="line">prepend():</span><br><span class="line">	对象1.prepend(对象2):将对象2添加到对象1内部，并且在开头</span><br><span class="line">after():</span><br><span class="line">	对象1.after(对象2)：将对象2添加到对象1后面</span><br><span class="line">before():</span><br><span class="line">	对象1.beforer(对象2)：将对象2添加到对象1前面</span><br><span class="line">remove():</span><br><span class="line">	对象.remove():将对象删除</span><br><span class="line">empty():</span><br><span class="line">	对象.empty():清空所有后代元素</span><br></pre></td></tr></table></figure>

<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.默认显示和隐藏</span><br><span class="line">	1.show([speed,[easing],[fn]])</span><br><span class="line">		参数：</span><br><span class="line">			speed：动画速度，三个预定义值(&quot;slow&quot;,&quot;normal&quot;,&quot;fast&quot;),或者毫秒值如(1000)</span><br><span class="line">			easing:切换效果，默认为swing,可用linear</span><br><span class="line">				swing:动画效果，先慢后快再慢</span><br><span class="line">				linear:匀速</span><br><span class="line">	2.hide(speed,[easing],[fn])		</span><br><span class="line">	3.toggle(speed,[easing],[fn])</span><br><span class="line">2.滑动显示和隐藏方式</span><br><span class="line">	1.slideDown([speed,[easing],[fn]])</span><br><span class="line">	2.slideUp([speed,[easing],[fn]])</span><br><span class="line">	3.slideToggle([speed,[easing],[fn]])</span><br><span class="line">3.淡入淡出显示效果</span><br><span class="line">	1.fadeIn([speed,[easing],[fn]])</span><br><span class="line">	2.fadeOut([speed,[easing],[fn]])</span><br><span class="line">	3.fadeToggle([speed,[easing],[fn]])</span><br><span class="line">				</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">js遍历方式：</span><br><span class="line">	for(初始化值，循环结束条件，步长)</span><br><span class="line">jq遍历方式：</span><br><span class="line">	1.jq对象.each(callback)</span><br><span class="line">		return false,结束循环(break)</span><br><span class="line">		return true,结束本次循环(continue)</span><br><span class="line">	2.$.each(object,[callback])</span><br><span class="line">	3.for..of:	</span><br><span class="line">		for(li of citys)&#123;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.标准方式</span><br><span class="line">	jq对象.事件方法(回调函数)</span><br><span class="line">2.on绑定事件&#x2F;off解绑</span><br><span class="line">	jq对象.on(&quot;事件名称&quot;，回调函数)</span><br><span class="line">3.事件切换</span><br><span class="line">	jq对象.toggle(fn1,fn2...)</span><br></pre></td></tr></table></figure>

<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.$.fn.extend(object)</span><br><span class="line">	增强通过JQuery获取的对象的功能 $(&quot;#id&quot;)</span><br><span class="line">        $.fn.extend(&#123;</span><br><span class="line">            check:function()&#123;</span><br><span class="line">                alert(123);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">2.$.extend(object)</span><br><span class="line">	增强JQuery对象自身的功能</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="隔行换色"><a href="#隔行换色" class="headerlink" title="隔行换色"></a>隔行换色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script  src&#x3D;&quot;..&#x2F;..&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	&#x2F;&#x2F;需求：将数据行的奇数行背景色设置为 pink，偶数行背景色设置为 yellow</span><br><span class="line">	$(function () &#123;</span><br><span class="line">		$(&quot;tr:gt(1):odd&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</span><br><span class="line">		$(&quot;tr:gt(1):even&quot;).css(&quot;backgroundColor&quot;,&quot;yellow&quot;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="全选和全不选"><a href="#全选和全不选" class="headerlink" title="全选和全不选"></a>全选和全不选</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script  src&#x3D;&quot;..&#x2F;..&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	function selectAll(obj) &#123;</span><br><span class="line">		$(&quot;.itemSelect&quot;).prop(&quot;checked&quot;,obj.checked);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="QQ表情"><a href="#QQ表情" class="headerlink" title="QQ表情"></a>QQ表情</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;需求：点击qq表情，将其追加到发言框中</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F;需求：点击qq表情，将其追加到发言框中</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(&quot;ul img&quot;).click(function () &#123;</span><br><span class="line">               $(&quot;.word&quot;).append($(this).clone());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/2020/11/02/IO%E6%B5%81/</url>
    <content><![CDATA[<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>创建File实例：</p>
<p>​            File(String filePath)</p>
<p>​            File(String parentPath,String childPath)</p>
<p>​            File(File parentFile,String childPath)</p>
<a id="more"></a>

<p>路径分隔符：</p>
<p>​            windows： \\</p>
<p>​            unix:    /</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getAbsolutePath():获取绝对路径</span><br><span class="line">getName()：获取文件名</span><br><span class="line">getParent()：获取上层文件目录，若无，返回<span class="keyword">null</span></span><br><span class="line">file.isDirectory()：是文件目录</span><br><span class="line">file.isFile()：是文件</span><br><span class="line">file.exists():是否存在</span><br><span class="line">createNewFile():创建文件,若文件存在，则不创建，返回<span class="keyword">false</span></span><br><span class="line">madir():创建文件目录</span><br><span class="line">madirs():创建文件目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="io"><a href="#io" class="headerlink" title="io"></a>io</h3><p>流的体系结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">抽象基类					节点流						缓冲流</span><br><span class="line">	</span><br><span class="line">InputStream				FileInputStream			BufferedInputStream</span><br><span class="line">OutputStream			FileOutputStream		BufferedOutputStream</span><br><span class="line">Reader					FileReader				BufferedReader	</span><br><span class="line">Writer					FileWriter				BufferedWriter</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">      File file=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\b.txt&quot;</span>);</span><br><span class="line">      FileReader fr= <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">          <span class="keyword">char</span>[] ch=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">          <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ((len=fr.read(ch))!=-<span class="number">1</span>)&#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                  System.out.print(ch[i]);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (file!=<span class="keyword">null</span>)</span><br><span class="line">              fr.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="FileWrite"><a href="#FileWrite" class="headerlink" title="FileWrite"></a>FileWrite</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       File file=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\c.txt&quot;</span>);</span><br><span class="line">       FileWriter fw=<span class="keyword">new</span> FileWriter(file,<span class="keyword">true</span>);</span><br><span class="line">       fw.write(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">       fw.write(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">       fw.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h6 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">      File file=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\b.txt&quot;</span>);</span><br><span class="line">      File file1=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\e.txt&quot;</span>);</span><br><span class="line">      FileReader fr=<span class="keyword">null</span>;</span><br><span class="line">      FileWriter fw=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">           fr=<span class="keyword">new</span> FileReader(file);</span><br><span class="line">           fw=<span class="keyword">new</span> FileWriter(file1,<span class="keyword">true</span>);</span><br><span class="line">          <span class="keyword">int</span> len;</span><br><span class="line">          <span class="keyword">char</span>[] ch=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="keyword">while</span> ((len=fr.read(ch))!=-<span class="number">1</span>) &#123;</span><br><span class="line">              fw.write(ch,<span class="number">0</span>,len);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              fr.close();</span><br><span class="line">              fw.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="Buffered"><a href="#Buffered" class="headerlink" title="Buffered"></a>Buffered</h5><p>关闭外层流时，内层流也会自动关闭，</p>
<h5 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h5><h6 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h6><p>将一个字节的输入流转换为字符的输入流</p>
<h6 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h6><p>将一个字符的输出流转换为字节的输出流</p>
]]></content>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP</title>
    <url>/2020/12/28/JSP/</url>
    <content><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</span><br><span class="line"></span><br><span class="line">JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<h2 id="JSp脚本"><a href="#JSp脚本" class="headerlink" title="JSp脚本"></a>JSp脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% 代码 %&gt; : 定义的java代码在service方法中，service方法中可以定义什么，内就可以定义</span><br><span class="line">&lt;%！ 代码 %&gt; ：定义的java代码，在jsp转换后的java类的成员位置</span><br><span class="line">&lt;%&#x3D; 代码 %&gt;：定义的java代码，会输出到页面</span><br></pre></td></tr></table></figure>

<h2 id="JSp内置对象"><a href="#JSp内置对象" class="headerlink" title="JSp内置对象"></a>JSp内置对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request：</span><br><span class="line">response：</span><br><span class="line">out：将字符输出到页面</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/11/16/JavaScript/</url>
    <content><![CDATA[<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript=ECMAScript+BOM+DOM</p>
<p>功能：增强用户和Html页面的交互，让页面有一些动态效果</p>
<a id="more"></a>

<h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><p>​                        1.与html结合方式        </p>
<p>​                                        1.内部js</p>
<p>​                                                        定义,标签体内容就是js代码                                                        </p>
<p>​                                        2.外部js</p>
<p>​                                                        定义,通过src属性引入外部js文件</p>
<p>​                        2.注释</p>
<p>​                                        1.单行注释//</p>
<p>​                                        2.多行注释/*   */</p>
<p>​                        3.数据类型</p>
<p>​                                        1.原始数据类型（基本数据类型）</p>
<p>​                                                1.number：数字， 整数/小数/NaN</p>
<p>​                                                2.string：字符串</p>
<p>​                                                3.boolean：true/false</p>
<p>​                                                4.null：为空的占位符</p>
<p>​                                                5.undefined：未定义</p>
<p>​                                        2.引用数据类型：对象</p>
<p>​                        4.变量</p>
<p>​                                        语法：var 变量名=初始值；</p>
<p>​                                                    var局部变量，不写为全局变量</p>
<p>​                        5.运算符    </p>
<p>​                        6.流程控制语句        </p>
<p>​            对象：</p>
<h5 id="Function：函数（方法）对象"><a href="#Function：函数（方法）对象" class="headerlink" title="Function：函数（方法）对象"></a>Function：函数（方法）对象</h5><p>​                                1.创建：</p>
<p>​                                            1.    function 方法名称（形参列表）{</p>
<p>​                                                    方法体</p>
<p>​                                                }</p>
<p>​                                            2.var 方法名=function(){</p>
<p>​                                                    方法体</p>
<p>​                                                }</p>
<p>​                                2.属性：</p>
<p>​                                                length  形参个数</p>
<p>​                                3.特点：</p>
<p>​                                        1.方法是一个对象，如果定义名称相同的方法会覆盖</p>
<p>​                                        2.在JS中，方法的调用只与方法的名称相同，与参数列表无关</p>
<h5 id="Array：数组对象"><a href="#Array：数组对象" class="headerlink" title="Array：数组对象"></a>Array：数组对象</h5><p>​                                1.创建：        </p>
<p>​                                            1.var arr=new Array(元素列表)；</p>
<p>​                                            2.var arr=new Array(默认长度);</p>
<p>​                                            3.var arr=[元素列表];</p>
<h5 id="Math："><a href="#Math：" class="headerlink" title="Math："></a>Math：</h5><p>​                                1.方法：</p>
<p>​                                        random():返回0~1之间的随机数，包含0不包含1</p>
<p>​                                        ceil(x):对数进行向上舍入</p>
<p>​                                        floor(x):对数向下舍入</p>
<p>​                                        round(x):把数四舍五入为最近的整数</p>
<h5 id="RegExp-正则表达式对象"><a href="#RegExp-正则表达式对象" class="headerlink" title="RegExp:正则表达式对象"></a>RegExp:正则表达式对象</h5><p>​                                定义字符串的组成规则</p>
<p>​                                    1.单个字符：[ ]</p>
<p>​                                            [a]  </p>
<p>​                                            [ab]   a或者b</p>
<p>​                                            [a-zA-Z0-9_]  a到z A到Z 0-9 下划线</p>
<p>​                                        特殊符号</p>
<p>​                                            \d:0-9</p>
<p>​                                             \w:[a-zA-Z0-9_]         </p>
<p>​                                    2.量词符号：</p>
<p>​                                            ？：出现一次或零次</p>
<p>​                                            *：出现零次或多次</p>
<p>​                                            +：出现一次或多次</p>
<p>​                                            {m,n}:m&lt;=数量&lt;=n</p>
<p>​                                    3.开始结束：</p>
<p>​                                            ^：开始</p>
<p>​                                            $：结束</p>
<p>​                                1.创建：        </p>
<p>​                                        var reg=new RegExp(“正则表达式”);</p>
<p>​                                        var reg=/正则表达式/;</p>
<p>​                                2.方法：    </p>
<p>​                                        boolean  test(参数)</p>
<h5 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h5><p>​                    全局变量，直接通过方法名调用</p>
<h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>浏览器对象模型</p>
<p>​        组成：</p>
<p>​                window：窗口对象</p>
<p>​                        不需要创建，直接使用，window.方法名();方法名可省略</p>
<p>​            方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">弹出方法：</span><br><span class="line">		alert():显示弹出警告框</span><br><span class="line">        confirm():带确定，取消的对话框，点击确定返回<span class="literal">true</span>，取消返回<span class="literal">false</span>  </span><br><span class="line">        prompt():用户可输入的对话框</span><br><span class="line">        		返回值：用户输入的值</span><br><span class="line">定时器方法：</span><br><span class="line">		setTimeOut():几秒后执行</span><br><span class="line">        		setTimeOut(fun(),<span class="number">2000</span>);</span><br><span class="line">		 <span class="built_in">setInterval</span>():循环执行</span><br><span class="line">         	返回值 id</span><br><span class="line">        clearTimeOut(id):取消定时器</span><br><span class="line">其他方法：</span><br><span class="line">		open():打开新窗口</span><br><span class="line">				open(<span class="string">&quot;https//www.baidu.com&quot;</span>);</span><br><span class="line">		close():关闭当前窗口</span><br></pre></td></tr></table></figure>

<p>​            属性：</p>
<p>​                            获取其他BOM对象</p>
<p>​                                    window.history;</p>
<p>​                            获取DOM对象                        </p>
<p>​                History：历史记录对象</p>
<p>​                Location：地址栏对象</p>
<p>​                            方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reload():刷新</span><br><span class="line">         </span><br></pre></td></tr></table></figure>

<p>​                            属性：href：</p>
<p>​                Navigator：窗口对象</p>
<p>​                Screen：显示器屏幕对象</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>​        核心DOM对象模型：</p>
<p>​                Document:文档对象</p>
<p>​                        方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取Element对象：</span><br><span class="line">	getElementById():</span><br><span class="line">    getElementByTagName():</span><br><span class="line">    getElementByName():</span><br><span class="line">	</span><br><span class="line"><span class="number">2.</span>创建其他DOM对象：</span><br><span class="line">	cerateElement()</span><br></pre></td></tr></table></figure>



<p>​                Element:元素对象</p>
<p>​                        方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">removeAttribute():删除属性</span><br><span class="line">setAttribute():设置属性</span><br></pre></td></tr></table></figure>



<p>​                Node：节点对象，其他几个对象的父对象    </p>
<p>​                            </p>
<p>​        功能：控制Html文档的内容</p>
<p>​        代码：获取页面标签对象 Element</p>
<p>​                     document.getElementById(“id值”)：通过元素的id获取元素对象</p>
<p>​                修改标签体内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var elementById = document.getElementById(&quot;id值&quot;);</span><br><span class="line">   elementById.innerHTML=&quot;要改变的内容&quot;;</span><br></pre></td></tr></table></figure>





<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>​            概念：某些组件被执行了某些操作后，触发了某些代码的执行    </p>
<p>​                事件：某些操作，如：单击，双击，键盘按下，鼠标移动</p>
<p>​                事件源：组件</p>
<p>​                监听器：代码</p>
<p>​                注册监听：将事件，事件源，监听器结合到一起，当事件源发生了某个事件，则处罚执行某个监听器代码</p>
<p>​            常见事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>单击事件：</span><br><span class="line">   	onclick：单击事件</span><br><span class="line">       ondblclick:双击事件</span><br><span class="line">   <span class="number">2.</span>焦点事件：</span><br><span class="line">   	onblur:失去焦点</span><br><span class="line">       onfocus:元素获得焦点</span><br><span class="line">   <span class="number">3.</span>加载事件：</span><br><span class="line">   	onload:一张页面或一幅图像完成加载</span><br><span class="line">   <span class="number">4.</span>鼠标点击事件：</span><br><span class="line">   	onmousedown:鼠标按钮被按下</span><br><span class="line">       	定义方法时，定义一个形参，就收event对象</span><br><span class="line">           event对象的button属性可以获取鼠标按下的值：<span class="number">0</span>左键，<span class="number">1</span>滚轮，<span class="number">2</span>右键</span><br><span class="line">	onmouseup:鼠标按钮被松开</span><br><span class="line">	onmousemove:鼠标按钮被移动</span><br><span class="line">       onmouseover:鼠标移到元素上</span><br><span class="line">       onmouseout：鼠标从元素上移开</span><br><span class="line">   <span class="number">5.</span>键盘事件：	</span><br><span class="line">   	onkeyup:键盘被松开</span><br><span class="line">	onkeydown:键盘被按下</span><br><span class="line">	onkeypress:键盘被按下松开</span><br><span class="line">   <span class="number">6.</span>选中和改变：</span><br><span class="line">   	onchange:被改变</span><br><span class="line">	onselect:被选择</span><br><span class="line"><span class="number">7.</span>表单事件：</span><br><span class="line">   	onsubmit:表单提交事件</span><br></pre></td></tr></table></figure>



<h4 id="练习"><a href="#练习" class="headerlink" title="练习:"></a>练习:</h4><p>  1.轮播图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;img/banner_1.jpg&quot;</span> id=<span class="string">&quot;img&quot;</span> border=<span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        i=i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        img.src=<span class="string">&quot;img/banner_&quot;</span>+i%<span class="number">3</span>+<span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setInterval</span>(fun,<span class="number">3000</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p> 2.自动跳转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;自动跳转&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        h1 font&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1 align=<span class="string">&quot;center&quot;</span> id=<span class="string">&quot;go&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>秒后自动跳转&lt;/h1&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> time=<span class="number">5</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            time=time-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> number = <span class="built_in">document</span>.getElementById(<span class="string">&quot;number&quot;</span>);</span><br><span class="line">            number.innerText=time;</span><br><span class="line">            <span class="keyword">if</span> (time&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                location.href=<span class="string">&quot;登陆成功.html&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setInterval</span>(fun,<span class="number">1000</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>3.全选与反选</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;表格全选&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table&#123;</span><br><span class="line">            border: <span class="number">1</span>px solid;</span><br><span class="line">            width: <span class="number">500</span>px;</span><br><span class="line">            margin-left: <span class="number">30</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        td,th&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            border: <span class="number">1</span>px solid;</span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line">            margin-top: <span class="number">10</span>px;</span><br><span class="line">            margin-left: <span class="number">30</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .over&#123;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        .out&#123;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;selectAll&quot;</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cbs = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;cb&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs.length; i++) &#123;</span><br><span class="line">                cbs[i].checked=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;unSelectAll&quot;</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cbs1 = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;cb&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs1.length; i++) &#123;</span><br><span class="line">                cbs1[i].checked=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;selectRev&quot;</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cbs2 = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;cb&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cbs2.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cbs2[i].checked==<span class="literal">true</span>)&#123;</span><br><span class="line">                    cbs2[i].checked=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    cbs2[i].checked=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;caption&gt;学生信息表&lt;/caption&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cb&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstcb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;令狐冲&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;任我行&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;男&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;岳不群&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;?&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;selectAll&quot;</span> value=<span class="string">&quot;全选&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;unSelectAll&quot;</span> value=<span class="string">&quot;全不选&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;selectRev&quot;</span> value=<span class="string">&quot;反选&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/12/11/Linux/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd app 切换到app目录</span><br><span class="line">cd .. 返回上级目录</span><br><span class="line">cd&#x2F; 切换到根目录</span><br><span class="line">cd- 切换到上次所在目录</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="列出文件列表"><a href="#列出文件列表" class="headerlink" title="列出文件列表"></a>列出文件列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls </span><br><span class="line">ls -a 列出所有文件或目录</span><br><span class="line">ls -l 列出目录详细信息</span><br></pre></td></tr></table></figure>

<h3 id="创建删除文件夹"><a href="#创建删除文件夹" class="headerlink" title="创建删除文件夹"></a>创建删除文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir：创建目录</span><br><span class="line">rmdir：删除目录</span><br><span class="line">rm：删除文件</span><br><span class="line">rm -r：删除文件夹</span><br></pre></td></tr></table></figure>

<h3 id="浏览文件内容"><a href="#浏览文件内容" class="headerlink" title="浏览文件内容"></a>浏览文件内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat 显示所有文件内容</span><br><span class="line">more 显示一屏幕内容</span><br><span class="line">	回车：显示下一行</span><br><span class="line">	空格：显示下一屏</span><br><span class="line">	q:退出</span><br><span class="line">less：与more相似	</span><br><span class="line"> tail -n:显示后n行内容</span><br><span class="line">	  -f：动态显示</span><br><span class="line">	  ctrl+c：退出</span><br></pre></td></tr></table></figure>

<h3 id="复制剪切文件"><a href="#复制剪切文件" class="headerlink" title="复制剪切文件"></a>复制剪切文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp:复制文件</span><br><span class="line">mv：剪切</span><br></pre></td></tr></table></figure>

<h3 id="压缩解压缩"><a href="#压缩解压缩" class="headerlink" title="压缩解压缩"></a>压缩解压缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打包:tar -cvf xxx.tar</span><br><span class="line">打包并压缩：tar -zcvf xxx.tar.gz </span><br><span class="line">解压：tar -xvf xxx.tar</span><br><span class="line">	 tar -zxvf xxx.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name &quot;ins*&quot; 查找文件名以ins开头的文件</span><br><span class="line">find &#x2F; -user itcast -ls 查找用户itcast的文件</span><br><span class="line"></span><br><span class="line">grep  lang anaconda-ks.cfg  在文件中查找lang</span><br><span class="line">grep  lang anaconda-ks.cfg   -color 在文件中查找lang，高亮显示</span><br></pre></td></tr></table></figure>

<h3 id="重定向输出"><a href="#重定向输出" class="headerlink" title="重定向输出"></a>重定向输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat bb.txt &gt; a.txt</span><br><span class="line">    将bb.txt文件内容输出到a.txt</span><br><span class="line">      &gt;覆盖</span><br><span class="line">      &gt;&gt;追加</span><br></pre></td></tr></table></figure>

<h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef 查看所有命令</span><br><span class="line">ps -ef | grep ssh 查看某一进程</span><br><span class="line">kill -9  2862 杀死进程</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.代表文件类型</span><br><span class="line">	-代表文件</span><br><span class="line">	d代表文件夹</span><br><span class="line">	l代表连接</span><br><span class="line">2.当前用户具有该文件的权限</span><br><span class="line">	r：read 读		4</span><br><span class="line">	w：write 写		2</span><br><span class="line">	x excute 执行		1</span><br><span class="line">3.当前组内其他用户具有该文件的权限</span><br><span class="line">	r：read 读</span><br><span class="line">	w：write 写</span><br><span class="line">	x excute 执行</span><br><span class="line">4.其他组内其他用户具有该文件的权限</span><br><span class="line">	r：read 读</span><br><span class="line">	w：write 写</span><br><span class="line">	x excute 执行</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">修改权限：chmod 755      -----&gt;   4+2+1   4+1  4+1	</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.主机名配置</span><br><span class="line">	hostname itheima   </span><br><span class="line">2.ip地址配置</span><br><span class="line">	</span><br></pre></td></tr></table></figure>







<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd :显示当前所在文件夹</span><br><span class="line">touch a.txt 创建一个空文件夹</span><br><span class="line">clear:清屏</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2020/10/31/Map/</url>
    <content><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>map中的key：无序的，不可重复的，使用set存储所有的key—-&gt;重写equals(),hashcode()</p>
<p>map中的value：无序的，可重复的，使用collection存储value—–&gt;value所在的类重写equals()</p>
<a id="more"></a>

<p>map的entry：无序的，不可重复的，使用set存储所有的entry</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdk7:</span><br><span class="line">HashMap hm=<span class="keyword">new</span> HashMap();</span><br><span class="line">		底层创建长度为<span class="number">16</span>的数组 Entry[] table</span><br><span class="line">        map.put(key,value):</span><br><span class="line">				首先调用key所在的hashcode（）方法计算哈希值，再经过寻址算法计算出在Entry所存放的位置</span><br><span class="line">                若此位置上没有元素，则直接放在此处，若此位置有元素，则先比较哈希值，</span><br><span class="line">                若哈希值不同，则添加成功，若哈希值相同则比较equals（）</span><br><span class="line">                若返回<span class="keyword">false</span>，则添加成功，若为<span class="keyword">true</span>，则覆盖原来的value    </span><br><span class="line">                    </span><br><span class="line">jdk8:     </span><br><span class="line">	 HashMap hm=<span class="keyword">new</span> HashMap();</span><br><span class="line">     在调用put（）方法是创建长度为<span class="number">16</span>的数组</span><br><span class="line">     底层数组是Node[]</span><br><span class="line">     数据个数&gt;<span class="number">8</span>且数组长度&gt;<span class="number">64</span>时，改为红黑树存储    </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdk7：</span><br><span class="line">底层创建长度为16的数组 Entry[] table：</span><br><span class="line">		负载因子：0.75，初始长度：16，</span><br><span class="line">		临界值：负载因子*初始长度，</span><br><span class="line">		扩容：超出临界值且存放位置非空，扩容长度：*2</span><br><span class="line">map.put(key,value):</span><br><span class="line">		计算哈希值</span><br><span class="line">		再调用indexFor()：哈希值&amp;(table.length-1) 计算出所在数组位置</span><br><span class="line">		在for循环遍历分支</span><br><span class="line">			for(Entry&lt;k,v&gt; e&#x3D;table[i],e!&#x3D;null,e&#x3D;e.next)&#123;</span><br><span class="line">		   	 	if(e.hash&#x3D;&#x3D;hash&amp;&amp;((k&#x3D;e.key||key.equals(k))))</span><br><span class="line">			&#125;</span><br><span class="line">		添加：头插法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdk8:</span><br><span class="line">	尾插法</span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>hashMap子类</p>
<p>可以按添加顺序遍历</p>
<p>Entry&lt;k,v&gt; extends HashMap.Node&lt;k,v&gt;{</p>
<p> Entry&lt;k,v&gt; before,after;   —–&gt;记录前后元素</p>
<p>}</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>向TreeMap添加key-value。要求key是同一类创建的对象</p>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>常用来处理配置文件，key-value都是字符串类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties pos=<span class="keyword">new</span> Properties();</span><br><span class="line">FileIntputStream fis=<span class="keyword">new</span> FileIntputStream(<span class="string">&quot;&quot;</span>);</span><br><span class="line">pos.load(fis);</span><br><span class="line">pos.getProperties(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>集合 javase</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2021/01/04/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyBatis 是一款优秀的持久层框架</span><br><span class="line"></span><br><span class="line">MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</span><br><span class="line"></span><br><span class="line">MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</span><br><span class="line"></span><br><span class="line">MyBatis 是一个半自动化的ORM框架 (Object Relationship Mapping) --&gt;对象关系映射</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="01-MyBatis第一个程序"><a href="#01-MyBatis第一个程序" class="headerlink" title="01:MyBatis第一个程序"></a>01:MyBatis第一个程序</h2><h3 id="导入MyBatis相关-jar-包"><a href="#导入MyBatis相关-jar-包" class="headerlink" title="导入MyBatis相关 jar 包"></a>导入MyBatis相关 jar 包</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写MyBatis核心配置文件"><a href="#编写MyBatis核心配置文件" class="headerlink" title="编写MyBatis核心配置文件"></a>编写MyBatis核心配置文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写MyBatis工具类"><a href="#编写MyBatis工具类" class="headerlink" title="编写MyBatis工具类"></a>编写MyBatis工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">           InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">           sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取SqlSession连接</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">   <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">   <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//构造,有参,无参</span></span><br><span class="line">   <span class="comment">//set/get</span></span><br><span class="line">   <span class="comment">//toString()</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Mapper接口类"><a href="#编写Mapper接口类" class="headerlink" title="编写Mapper接口类"></a>编写Mapper接口类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Mapper-xml配置文件"><a href="#编写Mapper-xml配置文件" class="headerlink" title="编写Mapper.xml配置文件"></a>编写Mapper.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       SqlSession session = MybatisUtils.getSession();</span><br><span class="line">       <span class="comment">//方法一:</span></span><br><span class="line">       <span class="comment">//List&lt;User&gt; users = session.selectList(&quot;com.kuang.mapper.UserMapper.selectUser&quot;);</span></span><br><span class="line">       <span class="comment">//方法二:</span></span><br><span class="line">       UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">       List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line">       session.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可能出现问题说明：Maven静态资源过滤问题"><a href="#可能出现问题说明：Maven静态资源过滤问题" class="headerlink" title="可能出现问题说明：Maven静态资源过滤问题**"></a>可能出现问题说明：Maven静态资源过滤问题**</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="02：CRUD操作及配置解析"><a href="#02：CRUD操作及配置解析" class="headerlink" title="02：CRUD操作及配置解析"></a>02：CRUD操作及配置解析</h2><h3 id="根据id查询用户"><a href="#根据id查询用户" class="headerlink" title="根据id查询用户"></a><strong>根据id查询用户</strong></h3><h4 id="在UserMapper中添加对应方法"><a href="#在UserMapper中添加对应方法" class="headerlink" title="在UserMapper中添加对应方法"></a>在UserMapper中添加对应方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">   <span class="comment">//查询全部用户</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="comment">//根据id查询用户</span></span><br><span class="line">   <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在UserMapper-xml中添加Select语句"><a href="#在UserMapper-xml中添加Select语句" class="headerlink" title="在UserMapper.xml中添加Select语句"></a>在UserMapper.xml中添加Select语句</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="给数据库增加一个用户"><a href="#给数据库增加一个用户" class="headerlink" title="给数据库增加一个用户"></a><strong>给数据库增加一个用户</strong></h3><h4 id="1、在UserMapper接口中添加对应的方法"><a href="#1、在UserMapper接口中添加对应的方法" class="headerlink" title="1、在UserMapper接口中添加对应的方法"></a>1、在UserMapper接口中添加对应的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="2、在UserMapper-xml中添加insert语句"><a href="#2、在UserMapper-xml中添加insert语句" class="headerlink" title="2、在UserMapper.xml中添加insert语句"></a>2、在UserMapper.xml中添加insert语句</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改用户的信息"><a href="#修改用户的信息" class="headerlink" title="修改用户的信息"></a><strong>修改用户的信息</strong></h3><h4 id="编写接口方法"><a href="#编写接口方法" class="headerlink" title="编写接口方法"></a>编写接口方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="编写对应的配置文件SQL"><a href="#编写对应的配置文件SQL" class="headerlink" title="编写对应的配置文件SQL"></a>编写对应的配置文件SQL</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">  update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="根据id删除一个用户"><a href="#根据id删除一个用户" class="headerlink" title="根据id删除一个用户"></a><strong>根据id删除一个用户</strong></h3><h4 id="编写接口方法-1"><a href="#编写接口方法-1" class="headerlink" title="编写接口方法"></a>编写接口方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="编写对应的配置文件SQL-1"><a href="#编写对应的配置文件SQL-1" class="headerlink" title="编写对应的配置文件SQL"></a>编写对应的配置文件SQL</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">增删改需要 提交事务,重点!不写的话不会提交到数据库</span><br></pre></td></tr></table></figure>

<h2 id="03：配置解析"><a href="#03：配置解析" class="headerlink" title="03：配置解析"></a>03：配置解析</h2><h3 id="Properties-属性"><a href="#Properties-属性" class="headerlink" title="Properties(属性)"></a>Properties(属性)</h3><h4 id="在资源目录下新建一个db-properties"><a href="#在资源目录下新建一个db-properties" class="headerlink" title="在资源目录下新建一个db.properties"></a>在资源目录下新建一个db.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<h4 id="将文件导入properties-配置文件"><a href="#将文件导入properties-配置文件" class="headerlink" title="将文件导入properties 配置文件"></a>将文件导入properties 配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="typeAliases-别名"><a href="#typeAliases-别名" class="headerlink" title="typeAliases (别名)"></a>typeAliases (别名)</h3><p> 类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种</span></span><br><span class="line"><span class="comment">会使用 Bean 的首字母小写的非限定类名来作为它的别名。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mappers-映射器"><a href="#mappers-映射器" class="headerlink" title="mappers (映射器)"></a><strong>mappers</strong> (映射器)</h3><h4 id="引入资源方式"><a href="#引入资源方式" class="headerlink" title="引入资源方式"></a><strong>引入资源方式</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="04-Mybatis详细的执行流程"><a href="#04-Mybatis详细的执行流程" class="headerlink" title="04:Mybatis详细的执行流程"></a>04:Mybatis详细的执行流程</h2><p><img src="1612512088975.png" alt="1612512088975"></p>
<h2 id="05-一对多，多对一"><a href="#05-一对多，多对一" class="headerlink" title="05:一对多，多对一"></a>05:一对多，多对一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">   思路：</span></span><br><span class="line"><span class="comment">       1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">       2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">       3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">           1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">           2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">           3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">              多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">           4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">   association中column多参数配置：</span></span><br><span class="line"><span class="comment">       column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">      select * from teacher where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   思路:</span></span><br><span class="line"><span class="comment">       1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">       2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">           1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">               JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">               JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">               ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">      select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">      from student s,teacher t</span><br><span class="line">      where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="06动态sql"><a href="#06动态sql" class="headerlink" title="06动态sql"></a>06动态sql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- if</span><br><span class="line">- choose (when, otherwise)</span><br><span class="line">- trim (where, set)</span><br><span class="line">- foreach</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2020/12/07/Mysql/</url>
    <content><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	select</span><br><span class="line">		分组函数，列(要求出现在group by 的后面)</span><br><span class="line">	from</span><br><span class="line">    	表名</span><br><span class="line">    where</span><br><span class="line">    	筛选条件；</span><br><span class="line">    group by 分组的列表	</span><br><span class="line">    order by 排序列表 【asc|desc】	</span><br><span class="line"></span><br><span class="line"> 执行顺序：from----&gt;where---&gt;group by having----&gt;聚合函数----&gt;select---&gt;order by</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分类：</span><br><span class="line">	一、按条件表达式</span><br><span class="line">		条件运算符：&lt; &gt; !&#x3D; &#x3D; &gt;&#x3D; &lt;&#x3D;</span><br><span class="line">	二、按逻辑表达式</span><br><span class="line">    	逻辑运算符：&amp;&amp; ||  !    and or not</span><br><span class="line">    三、模糊查询</span><br><span class="line">    	 like</span><br><span class="line">    	 	ESCAPE &quot;$&quot;----&gt;将$定义为转义字符</span><br><span class="line">    	 between  and </span><br><span class="line">    	 in </span><br><span class="line">    	 is null</span><br><span class="line">    	 	查询没有奖金的员工名和奖金率</span><br><span class="line">    	 		select </span><br><span class="line">    	 			last_name,</span><br><span class="line">    	 			commission_pct</span><br><span class="line">    	 		form</span><br><span class="line">                	employees</span><br><span class="line">                where </span><br><span class="line">                	commission_pct IS NULL;</span><br><span class="line">            有奖金	</span><br><span class="line">              	    commission_pct IS NOT NULL;</span><br><span class="line">              	    </span><br><span class="line">           安全等于&lt;&#x3D;&gt;</span><br><span class="line">           IFNUll(字段，改成的值)，如果字段为NUll改为改成值</span><br><span class="line">     四、排序查询</span><br><span class="line">     	select 查询列表</span><br><span class="line">     	from 表</span><br><span class="line">     	where 筛选条件</span><br><span class="line">     	order by 排序列表 【asc|desc】</span><br></pre></td></tr></table></figure>

<h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">length:获取参数的字节个数</span><br><span class="line">comcat:拼接字符串</span><br><span class="line">upper:大写</span><br><span class="line">lower:小写</span><br><span class="line">substr：截取</span><br><span class="line">instr：初次索引，没找到返回0</span><br><span class="line">trim：去前后空格</span><br><span class="line">lpid：左填充</span><br><span class="line">rpid：右填充</span><br><span class="line">replace：替换</span><br></pre></td></tr></table></figure>

<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">round：四舍五入</span><br><span class="line">ceil：向上取整</span><br><span class="line">floor：向下取整</span><br><span class="line">truncate：截断</span><br><span class="line">mod：取余</span><br></pre></td></tr></table></figure>

<h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if函数：三目运算符</span><br><span class="line">	select IF(10&gt;5,&quot;大&quot;,&quot;小&quot;)</span><br><span class="line">case函数：</span><br><span class="line">	case 要判断的字段或者表达式</span><br><span class="line">	when 常量1 then 语句1</span><br><span class="line">	when 常量2 then 语句2</span><br><span class="line">	...</span><br><span class="line">	else </span><br><span class="line">	end</span><br></pre></td></tr></table></figure>

<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count(*):统计行数</span><br><span class="line">count(1):统计行数</span><br><span class="line">	myisam:count(*)效率高</span><br><span class="line">	innodb:效率差不多</span><br></pre></td></tr></table></figure>

<h3 id="where-和having的区别"><a href="#where-和having的区别" class="headerlink" title="where 和having的区别"></a>where 和having的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">where:</span><br><span class="line">    where是一个约束声明,使用where来约束来自数据库的数据;</span><br><span class="line">    where是在结果返回之前起作用的;</span><br><span class="line">    where中不能使用聚合函数。</span><br><span class="line">having:</span><br><span class="line">    having是一个过滤声明;</span><br><span class="line">    在查询返回结果集以后，对查询结果进行的过滤操作;</span><br><span class="line">    在having中可以使用聚合函数。</span><br></pre></td></tr></table></figure>

<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表名</span><br><span class="line">where 筛选条件</span><br><span class="line">group by 分组列表</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">①查询列表往往是 分组函数和分组字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询每个工种的员工平均工资</span><br><span class="line"> select AVG(salary),job_id</span><br><span class="line"> from emp</span><br><span class="line"> group by job_id;</span><br></pre></td></tr></table></figure>

<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	select 查询列表</span><br><span class="line">	from 表名1</span><br><span class="line">	join 表名2</span><br><span class="line">	where 筛选条件</span><br></pre></td></tr></table></figure>

<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子查询优先于主查询执行</span><br><span class="line"></span><br><span class="line">案子查询出现位置：</span><br><span class="line">		select后面</span><br><span class="line">			标量子查询</span><br><span class="line">		from后面	</span><br><span class="line">			表子查询</span><br><span class="line">		where或者having后面	√</span><br><span class="line">			列子查询   (单行)		√</span><br><span class="line">			标量子查询  (多行)		√</span><br><span class="line">			行子查询</span><br><span class="line">		exists后面</span><br><span class="line">			表子查询</span><br><span class="line">按结果集的行列数不同：</span><br><span class="line">		标量子查询(结果集只有一行一列)</span><br><span class="line">				单行操作符：&lt; &gt; &#x3D; </span><br><span class="line">		列子查询(结果集只有一列多行)</span><br><span class="line">				多行操作符：IN&#x2F;NOT IN :等于列表中的某一个</span><br><span class="line">						  ANY|SOME  ：</span><br><span class="line">						  ALL：</span><br><span class="line">		行子查询(结果集只有一行多列)</span><br><span class="line">		表子查询(结果即为多行多列)</span><br></pre></td></tr></table></figure>

<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure 存储过程名(参数列表)</span><br><span class="line">BEGIN</span><br><span class="line"> 		一组合法sql语句</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	参数列表包括：</span><br><span class="line">	  参数模式，参数名，参数列表</span><br><span class="line">	  	参数模式包括：</span><br><span class="line">	  		IN:调用方传入值</span><br><span class="line">	  		OUT：作为返回值</span><br><span class="line">	  		INOUT:既可以传入只有可以返回值</span><br></pre></td></tr></table></figure>

<h3 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call 存储过程名(实参列表)</span><br></pre></td></tr></table></figure>



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查询哪个部门的员工个数大于二</span><br><span class="line">	select count(*),id</span><br><span class="line">	from employees</span><br><span class="line">	group by id</span><br><span class="line">	having count(*)&gt;2;</span><br><span class="line">	</span><br><span class="line">2.查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪个，以及最低工资</span><br><span class="line">	select min(salary),manager_id</span><br><span class="line">	from employees</span><br><span class="line">	where manager_id&gt;102</span><br><span class="line">	group by manager_id</span><br><span class="line">	having min(salary)&gt;5000;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql高级</title>
    <url>/2021/02/21/Mysql%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><img src="1613892915666.png" alt="1613892915666"></p>
<a id="more"></a>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引是帮助MYSQL高效获取数据的数据结构</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优点：提高数据的检索效率</span><br><span class="line">	 降低数据排序成本</span><br><span class="line">缺点：占内存</span><br></pre></td></tr></table></figure>

<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><h4 id="单值索引"><a href="#单值索引" class="headerlink" title="单值索引"></a>单值索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个索引只包含单个列，一个表可以有多个单列索引</span><br></pre></td></tr></table></figure>

<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引列必须唯一，可以为空</span><br></pre></td></tr></table></figure>

<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个索引有多个列</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建：create [unique] index indexName On  mytable(columnname(length))</span><br><span class="line">	 alter mytable add [unique] index [indexName] on (columnname(length))</span><br><span class="line"></span><br><span class="line">删除：drop index [indexName] on mytable</span><br><span class="line"></span><br><span class="line">查看：show index from table </span><br></pre></td></tr></table></figure>

<h4 id="alter使用"><a href="#alter使用" class="headerlink" title="alter使用"></a>alter使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加主键索引(唯一，不为null)</span><br><span class="line">alter table tab_name add primary key (column_list) </span><br><span class="line"></span><br><span class="line">添加唯一索引(除了null外，必须唯一)</span><br><span class="line">alter table tab_name add unique index_name(lolumn_list) </span><br><span class="line"></span><br><span class="line">添加普通索引(索引值可以为多次)</span><br><span class="line">alter table tab_name add index_name(lolumn_list) </span><br><span class="line"></span><br><span class="line">添加全文索引</span><br><span class="line">alter table tab_name add fulltext index_name(lolumn_list) </span><br></pre></td></tr></table></figure>





<p>​            </p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/12/09/Redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p> Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。 </p>
<p> edis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。 </p>
<a id="more"></a>

<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.内存存储，持久化存储，</span><br><span class="line">2.效率高，可用于高速缓存</span><br><span class="line">3.发布订阅系统</span><br><span class="line">4.地图信息分析</span><br><span class="line">5.计时器，计数器(浏览量)</span><br></pre></td></tr></table></figure>

<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 切换数据库</span><br><span class="line">key* 查看所有的key</span><br><span class="line">get 获取value</span><br><span class="line">set 设置key</span><br><span class="line">exists 是否存在key</span><br><span class="line">move 移除key</span><br><span class="line">ttl 查看当前key的剩余时间</span><br><span class="line">type 查看key类型</span><br><span class="line">exprire 设置过期时间</span><br><span class="line">清除当前数据库 flushdb</span><br><span class="line">清除所有数据库 flushall</span><br></pre></td></tr></table></figure>

<h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get 获取value</span><br><span class="line">set 设置key</span><br><span class="line">incr 自增1</span><br><span class="line">decr 自减1</span><br><span class="line">incrby  10  自增10</span><br><span class="line">decrby  10  自减10</span><br><span class="line">getrange key1 0 3   截取0-3个字符串</span><br><span class="line">		 key1 0 -1  获取全部字符串</span><br><span class="line">setrange 替换字符串</span><br><span class="line">setex	设置过期时间</span><br><span class="line">setnx	不存在在设置</span><br><span class="line">mset	同时设置多个值</span><br><span class="line">getset	先get再set</span><br></pre></td></tr></table></figure>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>list命令以l开头</p>
<p>作为队列或栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpush 添加key，从左边放 头</span><br><span class="line">rpush 添加key，从右边放 尾</span><br><span class="line">lpop  移除</span><br><span class="line">rpop</span><br><span class="line">lidex list 1 通过下标获取list值</span><br><span class="line">lrem list 1 one 移除list结合中指定个数的value</span><br><span class="line">linsert after&#x2F;before 将某个值插入到某个值前面或后面</span><br></pre></td></tr></table></figure>

<h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>值不重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd 添加值</span><br><span class="line">sismember 判断之是否存在集合中</span><br><span class="line">srem 移除元素</span><br><span class="line">srandmember 随机抽取一个元素</span><br><span class="line">sdiff key1 key2 key1，key2差集</span><br><span class="line">sinter key1 key2 交集</span><br><span class="line">sunion key1 key2 并集</span><br></pre></td></tr></table></figure>

<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>Map集合，key-Map集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hset 	设置</span><br><span class="line">hmset 	设置多个值</span><br><span class="line">hget 	获取一个值</span><br><span class="line">hgetall	获取全部值</span><br><span class="line">hdel	删除指定字段</span><br><span class="line">hexists	判断key是否存在</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Zset(有序集合)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd 	添加值</span><br><span class="line">zrangebyscore 排序</span><br><span class="line">zrem 移除元素</span><br><span class="line">zrange 0 -1 查看集合内所有元素</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>本质是一组命令的集合，一个事务中的所有命令都会被序列化</p>
<p>redis单条命令保存原子性，事务不保存原子性</p>
<p>redis没有隔离级别的概念</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启事务：multi</span><br><span class="line">命令入队：</span><br><span class="line">执行事务：exec</span><br><span class="line">取消事务：discard</span><br></pre></td></tr></table></figure>

<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch</span><br></pre></td></tr></table></figure>

<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RDB其实就是把数据以快照的形式保存在磁盘上，默认的持久化方式</span><br><span class="line"></span><br><span class="line">提供了三种机制：save、bgsave、自动化</span><br><span class="line">	save：执行save命令期间，Redis不能处理其他命令</span><br><span class="line">	</span><br><span class="line">	bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求</span><br><span class="line">	</span><br><span class="line">	自动触发是由配置文件来完成的</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">优势：</span><br><span class="line"></span><br><span class="line">（1）RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</span><br><span class="line"></span><br><span class="line">（2）生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</span><br><span class="line"></span><br><span class="line">（3）RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</span><br></pre></td></tr></table></figure>

<h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis会将每一个收到的写命令都通过write函数追加到文件中。通俗的理解就是日志记录。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。</span><br><span class="line"></span><br><span class="line">三种触发机制</span><br><span class="line"></span><br><span class="line">（1）每修改同步always：同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好</span><br><span class="line"></span><br><span class="line">（2）每秒同步everysec：异步操作，每秒记录 如果一秒内宕机，有数据丢失</span><br><span class="line"></span><br><span class="line">（3）不同no：从不同步</span><br><span class="line"></span><br><span class="line">	优势：</span><br><span class="line">	1）AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。（2）AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。</span><br><span class="line"></span><br><span class="line">（3）AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>ServletContext</title>
    <url>/2020/10/26/ServletContext/</url>
    <content><![CDATA[<h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><p> 代表整个web应用，和服务器通信</p>
<p>​    获取</p>
<p>​            1、requst.getServletContext()</p>
<p>​             2、this.getServletContext()——&gt;httpServlet</p>
<a id="more"></a>

<p>​    功能 </p>
<p>​            1、获取MiME类型：</p>
<p>​                    getMimeType();</p>
<p>​            2、域对象：共享所有用户数据</p>
<p>​                    setAttribute(String msg,object o)</p>
<p>​                    getAttribute(object o)</p>
<p>​            3、获取服务器路径</p>
<p>​                    getReal Path(String path)</p>
<p>​                    getReal Path(“/a.txt”) ———-&gt;web目录下资源</p>
<p>​                    getReal Path(“/WEB-INF/b.txt”)  —————&gt;WEB-INF目录下资源</p>
<p>​                    getReal Path(“/WEB-INF/classes/c.txt”)———–&gt;src目录下资源</p>
]]></content>
      <tags>
        <tag>Javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/12/23/Spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring"></a>什么是spring</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring是轻量级开源框架，以ioc和aop为内核，提供了展现层SpringMVC和持久层SpringJDBCTemplate以及业务层事务管理等众多的企业级应用技术</span><br><span class="line">优势：</span><br><span class="line">	方便解耦</span><br><span class="line">	AOP编程的支持</span><br><span class="line">       声明式事物的支持</span><br><span class="line">       方便测试</span><br><span class="line">       方便集成框架</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bean标签属性：</span><br><span class="line">	id：唯一性标识</span><br><span class="line">	class：全限定名(存在无参构造)</span><br><span class="line"></span><br><span class="line">scope标签属性：</span><br><span class="line">	scope：对象的作用范围</span><br><span class="line">	singleton：默认值，单例的</span><br><span class="line">		bean在加载配置文件，创建容器是创建</span><br><span class="line">	prototype：多例的</span><br><span class="line">		bean在getBean()是创建</span><br><span class="line">	request：web项目中，Spring创建一个Bean对象，将对象存放到request域中</span><br><span class="line">	session：web项目中，Spring创建一个Bean对象，将对象存放到session域中</span><br><span class="line">	global session：web项目中，Spring创建一个Bean对象，将对象存放到global session域中</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Bean实例化的三种方式"><a href="#Bean实例化的三种方式" class="headerlink" title="Bean实例化的三种方式"></a>Bean实例化的三种方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.无参构造：</span><br><span class="line">		&lt;bean id&#x3D;&quot;UserDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoimpl&quot;&gt;</span><br><span class="line">   </span><br><span class="line"> 2.静态工厂：</span><br><span class="line"> 		static UserDao getUserDao()&#123;</span><br><span class="line">      return new UserDaoimpl();</span><br><span class="line">  &#125;</span><br><span class="line">  	 &lt;bean id&#x3D;&quot;u1&quot; class&#x3D;&quot;com.itheima.dao.impl.staicFa&quot; factory-method&#x3D;&quot;getUserDao&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"> </span><br><span class="line"> 3.工厂实例</span><br><span class="line"> 		UserDao getUserDao()&#123;</span><br><span class="line">      return new UserDaoimpl();</span><br><span class="line">  &#125;</span><br><span class="line"> 		&lt;bean id&#x3D;&quot;u2&quot; class&#x3D;&quot;com.itheima.dao.impl.Fa&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">  &lt;bean id&#x3D;&quot;u3&quot; factory-bean&#x3D;&quot;u2&quot; factory-method&#x3D;&quot;getUserDao&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="注入方法："><a href="#注入方法：" class="headerlink" title="注入方法："></a>注入方法：</h4><h5 id="1-属性-setter-注入"><a href="#1-属性-setter-注入" class="headerlink" title="1.属性 setter 注入:"></a>1.属性 setter 注入:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指 IoC 容器使用 setter 方法注入被依赖的实例。通过调用无参构造器或无参 static 工厂方法实例化 bean 后，调用该 bean 的 setter 方法，即可实现基于 setter 的 DI。</span><br><span class="line">&lt;bean id&#x3D;&quot;personService&quot; class&#x3D;&quot;com.mengma.ioc.PersonServiceImpl&quot;&gt;</span><br><span class="line">  	 &lt;!-- 将personDao实例注入personService实例中 --&gt;</span><br><span class="line">  	 &lt;property name&#x3D;&quot;personDao&quot; ref&#x3D;&quot;personDao&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-构造方法注入"><a href="#2-构造方法注入" class="headerlink" title="2.构造方法注入:"></a>2.构造方法注入:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指 IoC 容器使用构造方法注入被依赖的实例。基于构造器的 DI 通过调用带参数的构造方法实现，每个参数代表一个依赖。</span><br><span class="line">&lt;bean id&#x3D;&quot;pDao&quot; class&#x3D;&quot;&quot;&gt;</span><br><span class="line">       &lt;constructor-arg ref&#x3D;&quot;&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h4 id="注入数据类型"><a href="#注入数据类型" class="headerlink" title="注入数据类型"></a>注入数据类型</h4><h5 id="1-普通数据类型："><a href="#1-普通数据类型：" class="headerlink" title="1.普通数据类型："></a>1.普通数据类型：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;PSI&quot; class&#x3D;&quot;com.itheima.tdao.PersonServiceimpl&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;zs&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;13&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-集合数据类型"><a href="#3-集合数据类型" class="headerlink" title="3.集合数据类型"></a>3.集合数据类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.list:</span><br><span class="line">         &lt;property name&#x3D;&quot;hooby&quot;&gt;</span><br><span class="line">                &lt;list&gt;</span><br><span class="line">                    &lt;value&gt;a&lt;&#x2F;value&gt;</span><br><span class="line">                    &lt;value&gt;b&lt;&#x2F;value&gt;</span><br><span class="line">                    &lt;value&gt;c&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;&#x2F;list&gt;</span><br><span class="line">            &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">2.map:</span><br><span class="line">		 &lt;property name&#x3D;&quot;like&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key&#x3D;&quot;&quot;  value-ref&#x3D;&quot;&quot;&gt;&lt;&#x2F;entry&gt;</span><br><span class="line">            &lt;&#x2F;map&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.Properties:</span><br><span class="line">		&lt;property name&#x3D;&quot;properties&quot; &gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key&#x3D;&quot;p1&quot;&gt;a&lt;&#x2F;prop&gt;</span><br><span class="line">                &lt;prop key&#x3D;&quot;p2&quot;&gt;b&lt;&#x2F;prop&gt;</span><br><span class="line">                &lt;prop key&#x3D;&quot;p3&quot;&gt;c&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;&#x2F;props&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>

<h3 id="引入其他配置文件"><a href="#引入其他配置文件" class="headerlink" title="引入其他配置文件"></a>引入其他配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;imoprt resource&#x3D;&quot;app.xml&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Spring相关APi"><a href="#Spring相关APi" class="headerlink" title="Spring相关APi"></a>Spring相关APi</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext的实现类：</span><br><span class="line">	1.ClassPathXmlApplicationContext</span><br><span class="line">			类根路径上加载配置文件</span><br><span class="line">	2.FileSystemXmlApplicationContext</span><br><span class="line">    		磁盘路径</span><br><span class="line">    3.AnnotationConfigApplicationContext</span><br><span class="line">    		注解配置容器</span><br></pre></td></tr></table></figure>



<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="配置组件扫描"><a href="#配置组件扫描" class="headerlink" title="配置组件扫描"></a>配置组件扫描</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置组件扫描：&lt;context:component-scan base-package&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">			@ComponentScan</span><br></pre></td></tr></table></figure>

<h3 id="原始注解"><a href="#原始注解" class="headerlink" title="原始注解"></a>原始注解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@Component:使用在类上用于实例化Bean</span><br><span class="line">@Controller：使用在Web层类上用于实例化类</span><br><span class="line">@Service：使用在Service层类上用于实例化类</span><br><span class="line">@Repository：使用在Dao层类上用于实例化类</span><br><span class="line"></span><br><span class="line">@Autowired:使用在字段上，用于根据类型注入</span><br><span class="line">@Qualifier:结合@Autowired一起使用用于根据名称进行依赖注入</span><br><span class="line">@Resource:相当于@Autowired+@Qualifier  按照名称进行注入</span><br><span class="line">@value：注入普通属性</span><br><span class="line"></span><br><span class="line">@Scope：标注Bean的作用范围</span><br><span class="line"></span><br><span class="line">@PostConstruct：初始化方法</span><br><span class="line">@PerDestroy:销毁方法</span><br></pre></td></tr></table></figure>

<h3 id="新注解"><a href="#新注解" class="headerlink" title="新注解"></a>新注解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration：用于指定当前类使一个Spring配置类，当创建容器是会从该类上加注解</span><br><span class="line">@ComponentScan：与&lt;context:component-scan base-package&#x3D;&quot;&quot;&#x2F;&gt;一样</span><br><span class="line">@Bean：做用在方法上，标注该方法的返回值存储到Spring容器中</span><br><span class="line">@PropertySource：用于加载.property文件的配置</span><br><span class="line">@Import:用于导入其他配置类</span><br></pre></td></tr></table></figure>

<h3 id="集成Junit"><a href="#集成Junit" class="headerlink" title="集成Junit"></a>集成Junit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用@Runwith注解替换原来的运行周期</span><br><span class="line">2.使用@ContextConfiguration指定配置文件或配置类</span><br><span class="line">3.使用@Autowired注入需要测试的对象</span><br><span class="line">4.创建测试方法进行测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Runwith(Springjunit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration()</span><br><span class="line">public class test()&#123;</span><br><span class="line">	@Autowired</span><br><span class="line">	private UserService userService</span><br><span class="line">	</span><br><span class="line">	@Test</span><br><span class="line">	public void t ()&#123;</span><br><span class="line">		userService.save();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="JDk代理"><a href="#JDk代理" class="headerlink" title="JDk代理"></a>JDk代理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基于接口的动态代理</span><br></pre></td></tr></table></figure>

<h4 id="cglib代理"><a href="#cglib代理" class="headerlink" title="cglib代理"></a>cglib代理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基于父类的动态代理</span><br></pre></td></tr></table></figure>

<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Target(目标对象):代理的目标对象</span><br><span class="line">Proxy(代理对象):一个类被Aop织入增强后，就产生一个结果代理类</span><br><span class="line">Joinpoint(连接点):可以被增强的方法</span><br><span class="line">Pointcut(切入点):要被增强的方法</span><br><span class="line">Advice(通知&#x2F;增强）：拦截到Joinpoint之后所要做的事情就是通知</span><br><span class="line">Aspect(切面）：切点加通知</span><br><span class="line">Weaving（织入）:切点与通知结合的过程</span><br></pre></td></tr></table></figure>

<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyAspect &#123;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;前值增强&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;后置增强&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public interface Target &#123;</span><br><span class="line">    void save();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Targetimpl implements Target &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;save runnig...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;bean id&#x3D;&quot;target&quot; class&#x3D;&quot;com.itheima.aop.Targetimpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;myaspect&quot; class&#x3D;&quot;com.itheima.aop.MyAspect&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;aop:config&gt;</span><br><span class="line">            &lt;aop:aspect ref&#x3D;&quot;myaspect&quot;&gt;</span><br><span class="line">                    &lt;aop:before method&#x3D;&quot;before&quot; pointcut&#x3D;&quot;execution(public void com.itheima.aop.Target.save())&quot;&gt;&lt;&#x2F;aop:before&gt;</span><br><span class="line">            &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">        &lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(返回值类型 包名，类名，方法名(参数))</span><br><span class="line">返回值类型，包名，类名，方法名可以使用*代表任意</span><br><span class="line">包名与类名之间的一个点.代表当前包下的类，两个点..代表当前包及其子包下的类</span><br><span class="line">参数列表可以用..代表任意个数，任意参数列表</span><br><span class="line"></span><br><span class="line">execution(* comm.itheima.aop.*.*(..))</span><br><span class="line">execution(* comm.itheima.aop..*.*(..))</span><br><span class="line"></span><br><span class="line">切点表达式引用：</span><br><span class="line">	&lt;aop:pointcut id&#x3D;&quot;mypointcut&quot; expression&#x3D;&quot;execution(* com.itheima.aop*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">    &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;mypointcut&quot;&gt;&lt;&#x2F;aop:before&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:before&gt; 前置通知，指定增强方法在切入点方法之前执行</span><br><span class="line">&lt;aop:after-returning&gt; 后置通知，指定增强方法在切入点方法之后执行</span><br><span class="line">&lt;aop:around&gt; 环绕通知，指定增强方法在切入点方法之前，之后执行</span><br><span class="line">&lt;aop:throwing&gt; 异常抛出通知，</span><br><span class="line">&lt;aop:after&gt; 最终通知 用于配置最终通知，无论是否有异常都会执行</span><br><span class="line"></span><br><span class="line">同一个Aspect，不同advice的执行顺序：</span><br><span class="line"></span><br><span class="line">（1）没有异常情况下的执行顺序：</span><br><span class="line">around before advice</span><br><span class="line">before advice</span><br><span class="line">target method 执行</span><br><span class="line">around after advice</span><br><span class="line">after advice</span><br><span class="line">afterReturning</span><br><span class="line"></span><br><span class="line">（2）有异常情况下的执行顺序：</span><br><span class="line">around before advice</span><br><span class="line">before advice</span><br><span class="line">target method 执行</span><br><span class="line">around after advice</span><br><span class="line">after advice</span><br><span class="line">afterThrowing</span><br><span class="line">java.lang.RuntimeException: 异常发生</span><br></pre></td></tr></table></figure>

<h3 id="基于注解开发"><a href="#基于注解开发" class="headerlink" title="基于注解开发"></a>基于注解开发</h3><h4 id="通知类型-1"><a href="#通知类型-1" class="headerlink" title="通知类型"></a>通知类型</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Before</span><br><span class="line">@AfterReturning</span><br><span class="line">@Around</span><br><span class="line">@Throwing</span><br><span class="line">@After</span><br></pre></td></tr></table></figure>

<h4 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用@Aspect标注切面类</span><br><span class="line">2.使用@通知注解通知方法</span><br><span class="line">3.在配置文件中配置aop自动代理 &lt;aop:aspectj-autoproxy&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="BeanFactory和ApplicationContext有什么区别？"><a href="#BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="BeanFactory和ApplicationContext有什么区别？"></a><strong>BeanFactory和ApplicationContext有什么区别？</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。</span><br><span class="line">(1）BeanFactory是Spring里面最底层的接口，是IoC的核心，定义了IoC的基本功能，包含了各种Bean的定义、加载、实例化，依赖注入和生命周期管理。ApplicationContext接口作为BeanFactory的子类，</span><br><span class="line">（2）①BeanFactroy采用的是延迟加载形式来注入Bean的，只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。</span><br><span class="line"> ②ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。</span><br><span class="line">（3）BeanFactory需要手动注册，而ApplicationContext则是自动注册</span><br><span class="line">（4）BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader</span><br></pre></td></tr></table></figure>

<h4 id="Spring-Bean的生命周期？"><a href="#Spring-Bean的生命周期？" class="headerlink" title="Spring Bean的生命周期？"></a><strong>Spring Bean的生命周期？</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring Bean的生命周期只有四个阶段：实例化 Instantiation --&gt; 属性赋值 Populate  --&gt; 初始化 Initialization  --&gt; 销毁 Destruction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（1）实例化Bean：</span><br><span class="line"></span><br><span class="line">对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。</span><br><span class="line"></span><br><span class="line">对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。</span><br><span class="line"></span><br><span class="line">（2）设置对象属性（依赖注入）：实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成属性设置与依赖注入。</span><br><span class="line"></span><br><span class="line">（3）处理Aware接口：Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的一些资源：</span><br><span class="line"></span><br><span class="line">①如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，传入Bean的名字；</span><br><span class="line">②如果这个Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。</span><br><span class="line">②如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。</span><br><span class="line">③如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</span><br><span class="line">（4）BeanPostProcessor前置处理：如果想对Bean进行一些自定义的前置处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。</span><br><span class="line"></span><br><span class="line">（5）InitializingBean：如果Bean实现了InitializingBean接口，执行afeterPropertiesSet()方法。</span><br><span class="line"></span><br><span class="line">（6）init-method：如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</span><br><span class="line"></span><br><span class="line">（7）BeanPostProcessor后置处理：如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；</span><br><span class="line"></span><br><span class="line">以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</span><br><span class="line"></span><br><span class="line">（8）DisposableBean：当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</span><br><span class="line"></span><br><span class="line">（9）destroy-method：最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Spring框架中的Bean是线程安全的么？如果线程不安全，那么如何处理？"><a href="#Spring框架中的Bean是线程安全的么？如果线程不安全，那么如何处理？" class="headerlink" title="Spring框架中的Bean是线程安全的么？如果线程不安全，那么如何处理？"></a><strong>Spring框架中的Bean是线程安全的么？如果线程不安全，那么如何处理？</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器中的Bean本身不具备线程安全的特性，但是具体情况还是要结合Bean的作用域来讨论。</span><br><span class="line"></span><br><span class="line">（1）对于prototype作用域的Bean，每次都创建一个新对象，也就是线程之间不存在Bean共享，因此不会有线程安全问题。</span><br><span class="line"></span><br><span class="line">（2）对于singleton作用域的Bean，所有的线程都共享一个单例实例的Bean，因此是存在线程安全问题的。但是如果单例Bean是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Controller类、Service类和Dao等，这些Bean大多是无状态的，只关注于方法本身。</span><br></pre></td></tr></table></figure>

<h4 id="Spring如何解决循环依赖问题："><a href="#Spring如何解决循环依赖问题：" class="headerlink" title="Spring如何解决循环依赖问题："></a><strong>Spring如何解决循环依赖问题：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">循环依赖问题在Spring中主要有三种情况：</span><br><span class="line">（1）通过构造方法进行依赖注入时产生的循环依赖问题。</span><br><span class="line">（2）通过setter方法进行依赖注入且是在多例（原型）模式下产生的循环依赖问题。</span><br><span class="line">（3）通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题。</span><br><span class="line"></span><br><span class="line">第一种构造方法注入的情况下，在new对象的时候就会堵塞住了，其实也就是”先有鸡还是先有蛋“的历史难题。</span><br><span class="line"></span><br><span class="line">第二种setter方法（多例）的情况下，每一次getBean()时，都会产生一个新的Bean，如此反复下去就会有无穷无尽的Bean产生了，最终就会导致OOM问题的出现。</span><br><span class="line"></span><br><span class="line">Spring在单例模式下的setter方法依赖注入引起的循环依赖问题，主要是通过二级缓存和三级缓存来解决的，其中三级缓存是主要功臣。解决的核心原理就是：在对象实例化之后，依赖注入之前，Spring提前暴露的Bean实例的引用在第三级缓存中进行存储。</span><br></pre></td></tr></table></figure>

<h4 id="Spring的自动装配："><a href="#Spring的自动装配：" class="headerlink" title="Spring的自动装配："></a><strong>Spring的自动装配：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）在Spring框架xml配置中共有5种自动装配：</span><br><span class="line"></span><br><span class="line">no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</span><br><span class="line">byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。 </span><br><span class="line">byType：通过参数的数据类型进行自动装配。</span><br><span class="line">constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</span><br><span class="line">autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。</span><br><span class="line"></span><br><span class="line">2）基于注解的自动装配方式：</span><br><span class="line"></span><br><span class="line">使用@Autowired、@Resource注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，&lt;context:annotation-config &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Spring事务的种类："><a href="#Spring事务的种类：" class="headerlink" title="Spring事务的种类："></a><strong>Spring事务的种类：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①编程式事务管理使用TransactionTemplate。</span><br><span class="line"></span><br><span class="line">②声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前启动一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</span><br></pre></td></tr></table></figure>

<h4 id="Spring中的隔离级别："><a href="#Spring中的隔离级别：" class="headerlink" title="Spring中的隔离级别："></a><strong>Spring中的隔离级别：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">① ISOLATION_DEFAULT：这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。</span><br><span class="line"></span><br><span class="line">② ISOLATION_READ_UNCOMMITTED：读未提交，允许事务在执行过程中，读取其他事务未提交的数据。</span><br><span class="line"></span><br><span class="line">③ ISOLATION_READ_COMMITTED：读已提交，允许事务在执行过程中，读取其他事务已经提交的数据。</span><br><span class="line"></span><br><span class="line">④ ISOLATION_REPEATABLE_READ：可重复读，在同一个事务内，任意时刻的查询结果都是一致的。</span><br><span class="line"></span><br><span class="line">⑤ ISOLATION_SERIALIZABLE：所有事务逐个依次执行。</span><br></pre></td></tr></table></figure>

<h4 id="Spring框架中有哪些不同类型的事件？"><a href="#Spring框架中有哪些不同类型的事件？" class="headerlink" title="Spring框架中有哪些不同类型的事件？"></a><strong>Spring框架中有哪些不同类型的事件？</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。</span><br><span class="line"></span><br><span class="line">（2）上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始&#x2F;重新开始容器时触发该事件。</span><br><span class="line"></span><br><span class="line">（3）上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</span><br><span class="line"></span><br><span class="line">（4）上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</span><br><span class="line"></span><br><span class="line">（5）请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合</title>
    <url>/2021/03/03/SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Maven资源过滤"><a href="#Maven资源过滤" class="headerlink" title="Maven资源过滤"></a>Maven资源过滤</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h2><h3 id="1-数据库配置文件-database-properties"><a href="#1-数据库配置文件-database-properties" class="headerlink" title="1.数据库配置文件 database.properties"></a>1.数据库配置文件 <strong>database.properties</strong></h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h3 id="2-编写MyBatis的核心配置文件"><a href="#2-编写MyBatis的核心配置文件" class="headerlink" title="2. 编写MyBatis的核心配置文件"></a>2. 编写MyBatis的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-编写数据库对应的实体类-com-kuang-pojo-Books"><a href="#3-编写数据库对应的实体类-com-kuang-pojo-Books" class="headerlink" title="3. 编写数据库对应的实体类 com.kuang.pojo.Books"></a>3. 编写数据库对应的实体类 com.kuang.pojo.Books</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-编写Dao层的-Mapper接口！"><a href="#4-编写Dao层的-Mapper接口！" class="headerlink" title="4.编写Dao层的 Mapper接口！"></a>4.编写Dao层的 Mapper接口！</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-编写接口对应的-Mapper-xml-文件。"><a href="#5-编写接口对应的-Mapper-xml-文件。" class="headerlink" title="5.编写接口对应的 Mapper.xml 文件。"></a>5.编写接口对应的 Mapper.xml 文件。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-编写Service层的接口和实现类"><a href="#6-编写Service层的接口和实现类" class="headerlink" title="6. 编写Service层的接口和实现类"></a>6. 编写Service层的接口和实现类</h3><p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h2><h3 id="1-编写Spring整合Mybatis的相关的配置文件；spring-dao-xml"><a href="#1-编写Spring整合Mybatis的相关的配置文件；spring-dao-xml" class="headerlink" title="1. 编写Spring整合Mybatis的相关的配置文件；spring-dao.xml"></a>1. 编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Spring整合service层"><a href="#2-Spring整合service层" class="headerlink" title="2. Spring整合service层"></a>2. <strong>Spring整合service层</strong></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h2><h3 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、<strong>web.xml</strong></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-spring-mvc-xml"><a href="#2-spring-mvc-xml" class="headerlink" title="2.spring-mvc.xml"></a><strong>2.spring-mvc.xml</strong></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、Spring配置整合文件，applicationContext-xml"><a href="#3、Spring配置整合文件，applicationContext-xml" class="headerlink" title="3、Spring配置整合文件，applicationContext.xml"></a>3、<strong>Spring配置整合文件，applicationContext.xml</strong></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Controller-和-视图层编写"><a href="#Controller-和-视图层编写" class="headerlink" title="Controller 和 视图层编写"></a><strong>Controller 和 视图层编写</strong></h2><h3 id="1、BookController-类编写-，-方法一：查询全部书籍"><a href="#1、BookController-类编写-，-方法一：查询全部书籍" class="headerlink" title="1、BookController 类编写 ， 方法一：查询全部书籍"></a>1、BookController 类编写 ， 方法一：查询全部书籍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、编写首页-index-jsp"><a href="#2、编写首页-index-jsp" class="headerlink" title="2、编写首页 index.jsp"></a>2、编写首页 <strong>index.jsp</strong></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: <span class="number">18</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: <span class="number">180</span>px;</span><br><span class="line">           height: <span class="number">38</span>px;</span><br><span class="line">           margin: <span class="number">100</span>px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: <span class="number">38</span>px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: <span class="number">4</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-BookController-类编写-，-方法二：添加书籍"><a href="#3-BookController-类编写-，-方法二：添加书籍" class="headerlink" title="3. BookController 类编写 ， 方法二：添加书籍"></a>3. BookController 类编写 ， 方法二：添加书籍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPaper</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加书籍页面：addBook-jsp"><a href="#添加书籍页面：addBook-jsp" class="headerlink" title="添加书籍页面：addBook.jsp"></a>添加书籍页面：<strong>addBook.jsp</strong></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2021/01/07/SpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="什么是Spring-MVC？"><a href="#什么是Spring-MVC？" class="headerlink" title="什么是Spring MVC？"></a>什么是Spring MVC？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把模型-视图-控制器分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Spring-MVC的优点"><a href="#Spring-MVC的优点" class="headerlink" title="Spring MVC的优点"></a>Spring MVC的优点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）可以支持各种视图技术,而不仅仅局限于JSP；</span><br><span class="line"></span><br><span class="line">（2）与Spring框架集成（如IoC容器、AOP等）；</span><br><span class="line"></span><br><span class="line">（3）清晰的角色分配：前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping), 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）。</span><br><span class="line"></span><br><span class="line">（4） 支持各种请求资源的映射策略。</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC的主要组件？"><a href="#Spring-MVC的主要组件？" class="headerlink" title="Spring MVC的主要组件？"></a>Spring MVC的主要组件？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）前端控制器 DispatcherServlet（不需要程序员开发）</span><br><span class="line"></span><br><span class="line">作用：接收请求、响应结果，相当于转发器，有了DispatcherServlet 就减少了其它组件之间的耦合度。</span><br><span class="line"></span><br><span class="line">（2）处理器映射器HandlerMapping（不需要程序员开发）</span><br><span class="line"></span><br><span class="line">作用：根据请求的URL来查找Handler</span><br><span class="line"></span><br><span class="line">（3）处理器适配器HandlerAdapter</span><br><span class="line"></span><br><span class="line">注意：在编写Handler的时候要按照HandlerAdapter要求的规则去编写，这样适配器HandlerAdapter才可以正确的去执行Handler。</span><br><span class="line"></span><br><span class="line">（4）处理器Handler（需要程序员开发）</span><br><span class="line"></span><br><span class="line">（5）视图解析器 ViewResolver（不需要程序员开发）</span><br><span class="line"></span><br><span class="line">作用：进行视图的解析，根据视图逻辑名解析成真正的视图（view）</span><br><span class="line"></span><br><span class="line">（6）视图View（需要程序员开发jsp）</span><br><span class="line"></span><br><span class="line">View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）</span><br></pre></td></tr></table></figure>

<h2 id="请描述Spring-MVC的工作流程？描述一下-DispatcherServlet-的工作流程？"><a href="#请描述Spring-MVC的工作流程？描述一下-DispatcherServlet-的工作流程？" class="headerlink" title="请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？"></a>请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）用户发送请求至前端控制器DispatcherServlet；</span><br><span class="line">（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；</span><br><span class="line">（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；</span><br><span class="line">（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；</span><br><span class="line">（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；</span><br><span class="line">（6）Handler执行完成返回ModelAndView；</span><br><span class="line">（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；</span><br><span class="line">（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；</span><br><span class="line">（9）ViewResolver解析后返回具体View；</span><br><span class="line">（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）</span><br><span class="line">（11）DispatcherServlet响应用户。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="1610003252765.png" alt="1610003252765"></p>
<h2 id="注解原理是什么"><a href="#注解原理是什么" class="headerlink" title="注解原理是什么"></a>注解原理是什么</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC常用的注解有哪些？"><a href="#Spring-MVC常用的注解有哪些？" class="headerlink" title="Spring MVC常用的注解有哪些？"></a>Spring MVC常用的注解有哪些？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。</span><br><span class="line"></span><br><span class="line">@RequestBody：注解实现接收http请求的json数据，将json转换为java对象。</span><br><span class="line"></span><br><span class="line">@ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。</span><br></pre></td></tr></table></figure>

<h2 id="RequestMapping注解的作用"><a href="#RequestMapping注解的作用" class="headerlink" title="@RequestMapping注解的作用"></a>@RequestMapping注解的作用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</span><br><span class="line"></span><br><span class="line">RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）。</span><br><span class="line"></span><br><span class="line">value， method</span><br><span class="line"></span><br><span class="line">value： 指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</span><br><span class="line"></span><br><span class="line">method： 指定请求的method类型， GET、POST、PUT、DELETE等；</span><br><span class="line"></span><br><span class="line">consumes，produces</span><br><span class="line"></span><br><span class="line">consumes： 指定处理请求的提交内容类型（Content-Type），例如application&#x2F;json, text&#x2F;html;</span><br><span class="line"></span><br><span class="line">produces: 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</span><br><span class="line"></span><br><span class="line">params，headers</span><br><span class="line"></span><br><span class="line">params： 指定request中必须包含某些参数值是，才让该方法处理。</span><br><span class="line"></span><br><span class="line">headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</span><br></pre></td></tr></table></figure>

<h2 id="ResponseBody注解的作用"><a href="#ResponseBody注解的作用" class="headerlink" title="@ResponseBody注解的作用"></a>@ResponseBody注解的作用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。</span><br><span class="line"></span><br><span class="line">使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</span><br></pre></td></tr></table></figure>

<h2 id="PathVariable和-RequestParam的区别"><a href="#PathVariable和-RequestParam的区别" class="headerlink" title="@PathVariable和@RequestParam的区别"></a>@PathVariable和@RequestParam的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求路径上有个id的变量值，可以通过@PathVariable来获取 @RequestMapping(value &#x3D; “&#x2F;page&#x2F;&#123;id&#125;”, method &#x3D; RequestMethod.GET)</span><br><span class="line"></span><br><span class="line">@RequestParam用来获得静态的URL请求入参 spring注解时action里用到。</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC与Struts2区别"><a href="#Spring-MVC与Struts2区别" class="headerlink" title="Spring MVC与Struts2区别"></a>Spring MVC与Struts2区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相同点</span><br><span class="line"></span><br><span class="line">都是基于mvc的表现层框架，都用于web项目的开发。</span><br><span class="line"></span><br><span class="line">不同点</span><br><span class="line"></span><br><span class="line">1.前端控制器不一样。Spring MVC的前端控制器是servlet：DispatcherServlet。struts2的前端控制器是filter：StrutsPreparedAndExcutorFilter。</span><br><span class="line"></span><br><span class="line">2.请求参数的接收方式不一样。Spring MVC是使用方法的形参接收请求的参数，基于方法的开发，线程安全，可以设计为单例或者多例的开发，推荐使用单例模式的开发（执行效率更高），默认就是单例开发模式。struts2是通过类的成员变量接收请求的参数，是基于类的开发，线程不安全，只能设计为多例的开发。</span><br><span class="line"></span><br><span class="line">3.Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，Spring MVC通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</span><br><span class="line"></span><br><span class="line">4.与spring整合不一样。Spring MVC是spring框架的一部分，不需要整合。在企业项目中，Spring MVC使用更多一些。</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC怎么样设定重定向和转发的？"><a href="#Spring-MVC怎么样设定重定向和转发的？" class="headerlink" title="Spring MVC怎么样设定重定向和转发的？"></a>Spring MVC怎么样设定重定向和转发的？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）转发：在返回值前面加&quot;forward:&quot;，譬如&quot;forward:user.do?name&#x3D;method4&quot;</span><br><span class="line"></span><br><span class="line">（2）重定向：在返回值前面加&quot;redirect:&quot;，譬如&quot;redirect:http:&#x2F;&#x2F;www.baidu.com&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-MVC怎么和AJAX相互调用的？"><a href="#Spring-MVC怎么和AJAX相互调用的？" class="headerlink" title="Spring MVC怎么和AJAX相互调用的？"></a>Spring MVC怎么和AJAX相互调用的？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象。具体步骤如下 ：</span><br><span class="line"></span><br><span class="line">（1）加入Jackson.jar</span><br><span class="line"></span><br><span class="line">（2）在配置文件中配置json的映射</span><br><span class="line"></span><br><span class="line">（3）在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解。</span><br></pre></td></tr></table></figure>

<h2 id="如何解决POST请求中文乱码问题，GET的又如何处理呢？"><a href="#如何解决POST请求中文乱码问题，GET的又如何处理呢？" class="headerlink" title="如何解决POST请求中文乱码问题，GET的又如何处理呢？"></a>如何解决POST请求中文乱码问题，GET的又如何处理呢？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）解决post请求乱码问题：</span><br><span class="line"></span><br><span class="line">在web.xml中配置一个CharacterEncodingFilter过滤器，设置成utf-8；</span><br><span class="line">（2）get请求中文参数出现乱码解决方法有两个：</span><br><span class="line"></span><br><span class="line">①修改tomcat配置文件添加编码与工程编码一致，如下：</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">&lt;ConnectorURIEncoding&#x3D;&quot;utf-8&quot; connectionTimeout&#x3D;&quot;20000&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot; redirectPort&#x3D;&quot;8443&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/03/08/Vue/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p> Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 </p>
<a id="more"></a>

<h2 id="第一个vue程序"><a href="#第一个vue程序" class="headerlink" title="第一个vue程序"></a>第一个vue程序</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="javascript">                    message: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue会管理el选项命中的元素及其内部元素</span><br><span class="line">可以使用其他选择器</span><br><span class="line">可以使用其他双标签，不能使用HTML,BODY</span><br></pre></td></tr></table></figure>

<h3 id="data属性"><a href="#data属性" class="headerlink" title="data属性"></a>data属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">	message:&quot;hello&quot;,</span><br><span class="line">	school:&#123;</span><br><span class="line">		name:张三,</span><br><span class="line">		mobile:&quot;1455222&quot;</span><br><span class="line">	&#125;</span><br><span class="line">	a:[1,2,3,4]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取数据：</span><br><span class="line">	&#123;&#123;message&#125;&#125;</span><br><span class="line">	&#123;&#123;school.name&#125;&#125;</span><br><span class="line">	&#123;&#123;a[0]&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>替换所有内容</p>
<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            message: &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置innerHTML</p>
<p>解析标签</p>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">                    data: &#123;</span><br><span class="line"><span class="javascript">                        message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    methods:&#123;</span><br><span class="line"><span class="javascript">                        hello:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.alert(<span class="built_in">this</span>.message)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指令简写为@</p>
<p>绑定方法定义在methods中</p>
<p>方法内部可以通过this访问在data中的数据</p>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;onclick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;2020.jpg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            show:<span class="literal">true</span>,</span></span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                onclick:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.show=!<span class="built_in">this</span>.show</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据true，false判断是否显示</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  @<span class="attr">click</span>=<span class="string">&quot;onclick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;2020.jpg&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            show:<span class="literal">true</span>,</span></span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                onclick:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.show=!<span class="built_in">this</span>.show</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>操作dom树</p>
<p>频繁切换使用v-show</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置元素属性(比如：src,title,class)</p>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;me in mes&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;me.text&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="javascript">                   mes: [&#123;<span class="attr">text</span>:<span class="string">&quot;hello&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                         &#123;<span class="attr">text</span>: <span class="string">&quot;你好&quot;</span>&#125;</span></span><br><span class="line">                         ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    导入vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">                data: &#123;</span><br><span class="line"><span class="javascript">                    message:<span class="string">&quot;123&quot;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双向数据绑定(表单元素和数据)</p>
<h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios.get(地址?查询字符串).then(function(reponse)&#123;&#125;,function(err)&#123;&#125;)</span><br><span class="line">					请求成功时触发，          请求失败时触发						查询字符串：key&#x3D;value&amp;key2&#x3D;value2</span><br></pre></td></tr></table></figure>







]]></content>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/2020/10/20/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="安装所需工具"><a href="#安装所需工具" class="headerlink" title="安装所需工具"></a>安装所需工具</h2><ul>
<li>Node  <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li>
<li>Git      <a href="https://git-scm.com/">https://git-scm.com/</a></li>
<li>hexo</li>
</ul>
<h2 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h2><ul>
<li><p>检测node安装是否成功：</p>
<p>node -v（返回版本号）</p>
<p>npm -v（返回版本号）</p>
<a id="more"></a>
</li>
<li><p>安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）</p>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
<p>检测cnpm（返回cnpm的信息）</p>
<p>cnpm -v（返回cnpm的版本信息）</p>
</li>
<li><p>安装hexo（如果失败重新来过就可以了）</p>
<p>cnpm install -g hexo-cli</p>
<p>检测hexo -v（返回hexo的版本信息）</p>
</li>
</ul>
<h2 id="将网站部署到GitHub上"><a href="#将网站部署到GitHub上" class="headerlink" title="将网站部署到GitHub上"></a>将网站部署到GitHub上</h2><ul>
<li><p>建立一个仓库（repository） 名为  自己的昵称+.github.io </p>
</li>
<li><p>在Blog目录下安装一个hexo部署插件cnpm install –save hexo-deployer-git</p>
</li>
<li><p>找到Blog文件中的   _config.yml  文件，使用编译器打开，找到</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1603196206594.png" alt="1603196206594"></p>
</li>
</ul>
<p>type    写成git方便识别</p>
<p>repo    repository仓库地址将刚刚新建的github仓库地址</p>
<p>branch  分支这里设置管理员 master</p>
<p>（冒号后面留一个空格） </p>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><ul>
<li><p>开启hexo </p>
<p>hexo s</p>
</li>
<li><p>清除</p>
</li>
</ul>
<p>​     hexo clean</p>
<ul>
<li>生成文件</li>
</ul>
<p>​     hexo g</p>
<ul>
<li>部署文件</li>
</ul>
<p>​     hexo d</p>
<ul>
<li>更换主题</li>
</ul>
<p>git   clone  <a href="http://github.com/litten/hexo-theme-yilia.gitthemes/%EF%BC%88%E5%85%8B%E9%9A%86%E5%9C%B0%E5%9D%80%EF%BC%89/%EF%BC%88%E5%85%8B%E9%9A%86%E4%B9%8B%E5%90%8E%E7%9A%84%E6%9C%AC%E5%9C%B0%E4%BD%8D">http://github.com/litten/hexo-theme-yilia.gitthemes/（克隆地址）/（克隆之后的本地位</a></p>
<p>置）</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>css</title>
    <url>/2020/11/12/css/</url>
    <content><![CDATA[<h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><h4 id="与html结合方式"><a href="#与html结合方式" class="headerlink" title="与html结合方式"></a>与html结合方式</h4><p>1、内联式：</p>
<p>​                在标签内部使用style属性指定css代码</p>
<p>​                <a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span></span><br><span class="line">    hello css</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、内部样式：</p>
<p>​            在head标签内定义style标签，style标签的内容就是css代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    hello css</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、外部样式：</p>
<p>​            1.定义css资源文件</p>
<p>​            2.在head标签内，定义link标签，引入外部资源文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/a.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    hello css</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> <span class="string">&quot;css/a.css&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h4><p>格式：</p>
<p>​        选择器{</p>
<p>​            属性名1：属性值1；</p>
<p>​            属性名2：属性值2；</p>
<p>​            …..</p>
<p>}</p>
<p> 选择器：</p>
<p>​            1、基本选择器：</p>
<p>​                    1.id选择器</p>
<p>​                            语法：#id属性值{ }</p>
<p>​                    2.元素选择器</p>
<p>​                            语法：标签名称{ }</p>
<p>​                    3.类选择器</p>
<p>​                            语法：.class属性值{ }</p>
<p>​            2、扩展选择器：        </p>
<p>​                            并集选择器：选择器1，选择器2{ }</p>
<p>​                            子选择器：选择器1 选择器2{ }</p>
<p>属性：</p>
<p>​            盒子模型：</p>
<p>​                    padding:内边距</p>
<p>​                                    默认会影响盒子大小———-》解决 box-sizing:border-box</p>
<p>​                    margin:外边距</p>
<p>​            float:浮动</p>
<p>​                                                                    </p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1.注册页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">   body&#123;</span><br><span class="line">       background:url(<span class="string">&quot;img/register_bg.png&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">    #all&#123;</span><br><span class="line">        background-color: white;</span><br><span class="line">        margin-top: <span class="number">50</span>px;</span><br><span class="line">        padding-bottom: <span class="number">500</span>px;</span><br><span class="line">        width: <span class="number">1000</span>px;</span><br><span class="line">        height: <span class="number">300</span>px;</span><br><span class="line">        margin-left: <span class="number">380</span>px;</span><br><span class="line">        margin-right: <span class="number">500</span>px;</span><br><span class="line">        border: whitesmoke <span class="number">5</span>px solid;</span><br><span class="line">    &#125;</span><br><span class="line">    #regCh&#123;</span><br><span class="line">        color: yellow;</span><br><span class="line">        font-size: <span class="number">25</span>px;</span><br><span class="line">        padding-left: <span class="number">25</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    #regEng&#123;</span><br><span class="line">        color:gray;</span><br><span class="line">        font-size: <span class="number">25</span>px;</span><br><span class="line">        padding-left: <span class="number">25</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    #reg-left&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-top: <span class="number">25</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    #reg-center&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: <span class="number">80</span>px;</span><br><span class="line">        margin-top: <span class="number">50</span>px;</span><br><span class="line">        height: <span class="number">750</span>px;</span><br><span class="line">        width:<span class="number">150</span>px ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    input&#123;</span><br><span class="line">        border:<span class="number">1.5</span>px gray solid;</span><br><span class="line">        -webkit-border-radius: <span class="number">5</span>px;</span><br><span class="line">        <span class="comment">/*-moz-border-radius: 15px;*/</span></span><br><span class="line">        height: <span class="number">25</span>px;</span><br><span class="line">        width: <span class="number">250</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    #gender&#123;</span><br><span class="line">        width: <span class="number">50</span>px;</span><br><span class="line">        height: <span class="number">20</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    tr&#123;</span><br><span class="line">        height: <span class="number">55</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    td&#123;</span><br><span class="line">        width: <span class="number">25</span>px</span><br><span class="line">    ;</span><br><span class="line">    &#125;</span><br><span class="line">    #reg-rigth&#123;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-top: <span class="number">50</span>px;</span><br><span class="line">        margin-right: <span class="number">25</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;reg-left&quot;</span>&gt;</span><br><span class="line">        &lt;p id=<span class="string">&quot;regCh&quot;</span>&gt;新用户注册&lt;/p&gt;</span><br><span class="line">        &lt;p id=<span class="string">&quot;regEng&quot;</span>&gt;USER REGISTER&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;reg-center&quot;</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">            &lt;table align=<span class="string">&quot;center&quot;</span> &gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        用户名</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        密码</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        Email</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入邮箱&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        姓名</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        手机号</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        性别</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;men&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;femen&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        出生日期</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                        验证码</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;checkedCode&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/verify_code.jpg&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line">                &lt;tr &gt;</span><br><span class="line">                    &lt;td  colspan=<span class="string">&quot;2&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                        &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;reg-rigth&quot;</span>&gt;</span><br><span class="line">        已有账号？ &lt;a href=<span class="string">&quot;login.html&quot;</span>&gt;立即登录&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2020/12/22/maven/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;main&#x2F;java目录 核心代码结构</span><br><span class="line">src&#x2F;main&#x2F;resources 配置文件部分</span><br><span class="line">src&#x2F;test&#x2F;java目录 测试代码部分</span><br><span class="line">src&#x2F;test&#x2F;resources测试配置文件</span><br><span class="line">src&#x2F;main&#x2F;webapp 页面资源 js、css、图片</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean：清楚target目录</span><br><span class="line">mvn compile:编译</span><br><span class="line">mvn test :编译测试代码</span><br><span class="line">mvn package:打成war包</span><br><span class="line">mvn install:放置到本地仓库</span><br></pre></td></tr></table></figure>

<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编译：compile</span><br><span class="line">测试：test</span><br><span class="line">打包：package</span><br><span class="line">安装：install</span><br><span class="line">发布：deploy</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc</title>
    <url>/2020/11/09/jdbc/</url>
    <content><![CDATA[<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    <span class="comment">//获取数据库连接对象</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/day14&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//获取sql执行对象</span></span><br><span class="line">    Statement statement = conn.createStatement();</span><br><span class="line">    String sql=<span class="string">&quot;insert into user values (&#x27;zs&#x27;,14785)&quot;</span>;</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    statement.close();</span><br><span class="line">    conn.close();</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p>好处：</p>
<p>​            1.节约资源</p>
<p>​            2.用户访问高效</p>
<p>实现：</p>
<p>​            c3p0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource ds=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">   Connection connection = ds.getConnection();</span><br><span class="line">   System.out.println(connection);</span><br></pre></td></tr></table></figure>

<p>​            druid</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties po=<span class="keyword">new</span> Properties();</span><br><span class="line">     InputStream is = druid.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">     po.load(is);</span><br><span class="line">     DataSource dataSource = DruidDataSourceFactory.createDataSource(po);</span><br><span class="line">     Connection connection = dataSource.getConnection();</span><br><span class="line">     System.out.println(connection);</span><br></pre></td></tr></table></figure>

<h4 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 	    Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">        pro.load(jdbcTemplate.class.getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        JdbcTemplate jt=<span class="keyword">new</span> JdbcTemplate(ds);</span><br><span class="line">        String sql=<span class="string">&quot;update USER set password = 111 where name = &#x27;lis&#x27;&quot;</span>;</span><br><span class="line">        String sql1=<span class="string">&quot;insert into USER(name,password) values (?,?) &quot;</span>;</span><br><span class="line">        String sql2=<span class="string">&quot;delete  from user where password =?&quot;</span>;</span><br><span class="line"><span class="comment">//      System.out.println(jt.update(sql2,111));</span></span><br><span class="line">        String sql3=<span class="string">&quot;select *from user where name=?&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; stringObjectMap = jt.queryForMap(sql3,<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; strings = stringObjectMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">            System.out.println(stringObjectMap.get(string));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet</title>
    <url>/2020/10/21/servlet/</url>
    <content><![CDATA[<h1 id="servlet："><a href="#servlet：" class="headerlink" title="servlet："></a>servlet：</h1><h2 id="servlet体系结构"><a href="#servlet体系结构" class="headerlink" title="servlet体系结构"></a>servlet体系结构</h2><pre><code> Servlet -- 接口
    |
GenericServlet -- 抽象类    |
HttpServlet  -- 抽象类</code></pre>
<p> HttpServlet：对http协议的一种封装，简化操作</p>
<pre><code>      1. 定义类继承HttpServlet
            2. 复写doGet/doPost方法</code></pre>
<p>Servlet可以定义多个访问路径 ： @WebServlet({“/d4”,”/dd4”,”/ddd4”})  </p>
<a id="more"></a>    

<h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置Servlet</span><br><span class="line">    在web.xml中</span><br><span class="line">     &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">ServletDemo</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">demo1</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">demo1</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">init():初始化方法，在Servlet被创建时执行，只执行一次</span><br><span class="line">   service():每次被访问时执行，</span><br><span class="line">   destroy()::服务被正常关闭时执行，只执行一次   </span><br><span class="line">       </span><br><span class="line">       被创建：执行init()</span><br><span class="line">       	配置创建时机</span><br><span class="line">       	在&lt;servlet&gt;下创建&lt;load-on-startup&gt;的值</span><br><span class="line">           为负数：第一次访问时创建</span><br><span class="line">       	为非负数：在服务器启动时创建</span><br><span class="line">       提供服务：执行service()</span><br><span class="line">       被销毁：执行destroy()</span><br><span class="line">       	只有服务器正常关闭才执行</span><br><span class="line">       	一般用于释放资源</span><br></pre></td></tr></table></figure>



<h5 id="Servlet3-0"><a href="#Servlet3-0" class="headerlink" title="Servlet3.0"></a>Servlet3.0</h5><p>注解配置：</p>
<p>​        @webServlet(“资源路径”)</p>
<p>​        @webServlet(urlPatterns=”/demo”)</p>
<p>​        @webServlet(“/demo”)</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>xml</title>
    <url>/2020/11/24/xml/</url>
    <content><![CDATA[<h3 id="Xml"><a href="#Xml" class="headerlink" title="Xml"></a>Xml</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>可扩展的标记语言</p>
<p>可扩展：标签都是自定义的</p>
<a id="more"></a>

<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>存储数据</p>
<p>​    1.配置文件</p>
<p>​    2.在网络中传输</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>​        基本语法：    </p>
<p>​                1.xml文档的后缀名.xml</p>
<p>​                2.xml第一行必须定义为文档声明</p>
<p>​                3.xml文档中有且仅有一个根标签</p>
<p>​                4.属性值必须用引号引起来</p>
<p>​                5.标签必须关闭</p>
<p>​                6.标签名称区分大小写</p>
<p>​        组成部分：</p>
<p>​                1.文档声明    </p>
<p>​                        格式：<?xml 属性列表 ?></p>
<p>​                        属性列表：</p>
<p>​                                version:版本号</p>
<p>​                                encoding:编码方式</p>
<p>​                                standalone:是否独立（是否约束其他文件）</p>
<p>​                2.指令：结合css</p>
<p>​                3.标签：标签名称自定义    </p>
<p>​                4.属性：id属性值唯一</p>
<p>​                5.文本：</p>
<p>​                        CDATA区：在该区域所在的代码会被原样展示</p>
<p>​                                    格式：<![CDATA[数据]]></p>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析方式：</p>
<p>​        1.DOM：将标记语言文档一次性加载进内存，在内存中形成一个dom树</p>
<p>​                优点：操作方便，可以对文档进行CRUD的所有操作</p>
<p>​                缺点：占内存</p>
<p>​        2.SAX：逐行读取，基于事件驱动</p>
<p>​                优点：不占内存</p>
<p>​                缺点：只能读取</p>
<p>常见解析器：</p>
<p>​        1.JAXP</p>
<p>​        2.DOM4J</p>
<p>​        3.Jsoup</p>
<p>​        4.PULL</p>
]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>sleep与wait的区别</title>
    <url>/2020/10/29/sleep%E4%B8%8Ewait%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="sleep与wait的区别"><a href="#sleep与wait的区别" class="headerlink" title="sleep与wait的区别"></a>sleep与wait的区别</h3><p>1、sleep是线程中的方法，但是wait是Object中的方法。</p>
<a id="more"></a>

<p>2、sleep方法不会释放lock，但是wait会释放，而且会加入到等待队列中。</p>
<p>3、sleep方法不依赖于同步器synchronized，但是wait需要依赖synchronized关键字。</p>
<p>4、sleep不需要被唤醒（休眠之后推出阻塞），但是wait需要（不指定时间需要被别人中断）。</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/12/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>1.真实对象：被代理的对象</p>
<p>2.代理对象</p>
<p>3.代理模式：代理对象代理真实对象，达到增强真是对象的功能</p>
<a id="more"></a>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实现方式：</span><br><span class="line">	1.代理对象和真实对象实现同一接口</span><br><span class="line">	2.代理对象&#x3D;Proxy.newInstance();</span><br><span class="line">	3.使用代理对象调用方法</span><br><span class="line">	4.增强方法</span><br><span class="line">	</span><br><span class="line">	public class Proxy &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Lenovo lenovo&#x3D;new Lenovo();</span><br><span class="line">        </span><br><span class="line">        Compter proxy_lenovo &#x3D; (Compter) java.lang.reflect.Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), new InvocationHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            &#x2F;*</span><br><span class="line">            三个参数</span><br><span class="line">            method():执行的方法名</span><br><span class="line">            objects：调用方法所传递的参数</span><br><span class="line">             *&#x2F;</span><br><span class="line"></span><br><span class="line">            public Object invoke(Object o, Method method, Object[] objects) throws Throwable &#123;</span><br><span class="line">                System.out.println(&quot;代理对象方法被执行了&quot;);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        proxy_lenovo.sale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2>]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>会话技术</title>
    <url>/2020/11/29/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><p>功能：在一次会话范围内的多次请求间，共享数据</p>
<p>方式：</p>
<p>​        客户端会话技术：Cookie</p>
<p>​        服务器端会话技术：Session</p>
<a id="more"></a>

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1.</span>创建Cookie对象</span><br><span class="line">     <span class="keyword">new</span> Cookie(String name,String value);</span><br><span class="line"><span class="number">2.</span>发送Cookie对象</span><br><span class="line">    response.addCookie(Cookie cookie);</span><br><span class="line"><span class="number">3.</span>获取Cookie</span><br><span class="line">    requst.getCookies();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Cookie细节"><a href="#Cookie细节" class="headerlink" title="Cookie细节"></a>Cookie细节</h3><p>1.一次可不可以发送多个cookie?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">可以</span><br><span class="line">   可以创建多个Cookie对象，使用response点用多次addcookie方法发送</span><br></pre></td></tr></table></figure>

<p>2.cookie在浏览器中保存多长时间？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">默认情况：</span><br><span class="line">       当浏览器关闭后，Cookie数据销毁</span><br><span class="line">   持久化存储：</span><br><span class="line">       setMAxAge(<span class="keyword">int</span> seconds)</span><br><span class="line">       	<span class="number">1.</span>正数：将Cookie数据写到硬盘文件中，Cookie存活时间</span><br><span class="line">       	<span class="number">2.</span>负数：默认</span><br><span class="line">       	<span class="number">3.</span>零：删除Cookie信息</span><br></pre></td></tr></table></figure>

<p>3.cookie能不内存中文？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在tomcat8之前，不能</span><br><span class="line">   在tomcat8之后，可以</span><br></pre></td></tr></table></figure>

<p>4.cookie共享问题？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">假设在一个tomcat服务器中，部署多个web项目，这些web项目中cookie能不能共享？</span><br><span class="line">    默认情况下是不能的。</span><br><span class="line">    setPath(String path);-------&gt;设置cookie获取的范围，默认为当前虚拟目录</span><br><span class="line">    	如果要共享，将path设置为<span class="string">&quot;/&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取session对象</span><br><span class="line">    HttpSession session=req.getSession();</span><br><span class="line"><span class="number">2.</span>使用</span><br><span class="line">     session.getAttribute();</span><br><span class="line">     session.setAttribute();</span><br><span class="line">     session.removeAttribute();</span><br></pre></td></tr></table></figure>

<h3 id="Session细节："><a href="#Session细节：" class="headerlink" title="Session细节："></a>Session细节：</h3><p>1.当客户端关闭后，服务器不关闭，两次session是否为同一个？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">默认情况下不是</span><br><span class="line">如果需要相同创建cookie，键位JSESSIONID，设置cookie最大存活时间    </span><br></pre></td></tr></table></figure>

<p>2.当客户端不关闭，服务器关闭，两次session是否为同一个？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">不是同一个</span><br><span class="line">    session的钝化：</span><br><span class="line">    	在服务器正常关闭之前，将session对象序列化到硬盘</span><br><span class="line">    session的活化：</span><br><span class="line">    	在服务器启动后，将session文件转化为内存中的session对象</span><br></pre></td></tr></table></figure>

<p>3.session的失效时间？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>默认时间为<span class="number">30</span>分钟</span><br><span class="line">   <span class="number">2.</span>服务器关闭</span><br><span class="line">   <span class="number">3.</span>session对象调用inalidate()；    </span><br></pre></td></tr></table></figure>





<h2 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session存储在服务器端，cookie存储在客户端</span><br><span class="line">   session没有数据大小限制，cookie有</span><br><span class="line">   session数据安全，cookie数据相对于不安全    </span><br></pre></td></tr></table></figure>



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1.记住上次访问时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">案例需求：</span><br><span class="line">	<span class="number">1.</span> 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</span><br><span class="line">	<span class="number">2.</span> 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">backSevlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">       <span class="keyword">if</span>(cookies.length&gt;<span class="number">0</span>&amp;&amp;cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">               String name = cookie.getName();</span><br><span class="line">               <span class="keyword">if</span> (<span class="string">&quot;lastTime&quot;</span>.equals(name))&#123;</span><br><span class="line">                   String value = cookie.getValue();</span><br><span class="line">                   Date time=<span class="keyword">new</span> Date();</span><br><span class="line">                   SimpleDateFormat sim=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-mm-DD HH:mm:ss&quot;</span>);</span><br><span class="line">                   String format = sim.format(time);</span><br><span class="line">                   cookie.setValue(format);</span><br><span class="line">                   cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">                   resp.addCookie(cookie);</span><br><span class="line">                   resp.getWriter().write(<span class="string">&quot;欢迎回来，您上次的访问时间为：&quot;</span>+value);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(cookies.length==<span class="number">0</span>||cookies==<span class="keyword">null</span>) &#123;</span><br><span class="line">           Date time = <span class="keyword">new</span> Date();</span><br><span class="line">           SimpleDateFormat sim = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-mm-DD HH:mm:ss&quot;</span>);</span><br><span class="line">           String format = sim.format(time);</span><br><span class="line">           Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>, format);</span><br><span class="line">           cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">           resp.addCookie(cookie);</span><br><span class="line">           resp.getWriter().write(<span class="string">&quot;欢迎首次访问本文网站&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/10/29/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ehan</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Ehan instance=<span class="keyword">new</span> Ehan();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Ehan</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Ehan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lhan</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lhan instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lhan</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lhan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> Lhan();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBC</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DBC instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBC</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBC <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(DBC.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> DBC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//会指令重排</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBC</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DBC instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DBC</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBC <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(DBC.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> DBC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>字符集</title>
    <url>/2020/11/03/%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<h5 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h5><p>美国标准信息交换码</p>
<p>用一个字节的7位表示</p>
<a id="more"></a>

<h5 id="ISO8859-1"><a href="#ISO8859-1" class="headerlink" title="ISO8859-1"></a>ISO8859-1</h5><p>拉丁码表，欧洲码表</p>
<p>用一个字节的8位表示</p>
<h5 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h5><p>中国的中文编码表</p>
<p>首位为1两个字节代表一个字符</p>
<p>首位位0一个字节代表一个字符</p>
<h5 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h5><p>GB2312升级版，融合了更多的中文文字字符，最多两个字符编码</p>
<p>首位为1两个字节代表一个字符</p>
<p>首位位0一个字节代表一个字符</p>
<h5 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h5><p>国际标准编码表,所有文字两个字节表示</p>
<h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p>可用1-4个字节表示一个字符</p>
<p>汉字3个字节</p>
]]></content>
  </entry>
  <entry>
    <title>对象流</title>
    <url>/2020/11/05/%E5%AF%B9%E8%B1%A1%E6%B5%81/</url>
    <content><![CDATA[<p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</p>
<p>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制</p>
<a id="more"></a>

<p> <strong>对象序列化机制</strong>：允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其他程序获取了这种二进制流，就可以恢复成原来的Java对象 </p>
<h4 id="序列化要求："><a href="#序列化要求：" class="headerlink" title="序列化要求："></a>序列化要求：</h4><p>1、实现Serializable接口</p>
<p>2、提供一个全局变量：serialVersionUID</p>
<p>3、必须保证类内的属性都是可序列化的</p>
<p>基本数据类型可序列化</p>
<p>不能序列化static 、transient修饰的成员变量</p>
<p>transient： 将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会被序列化。 </p>
]]></content>
      <tags>
        <tag>io javase</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2020/11/06/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>获取Class的实例的方式</p>
<p>方式一：</p>
<p>​                调用运行时类的属性</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1=Person.class;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<p>​                调用运行时类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">Class c2=p1.getClass();</span><br></pre></td></tr></table></figure>

<p>方式三：</p>
<p>​            调用Class的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c3=Class.forName(<span class="string">&quot;com.java.Person&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>方式四：</p>
<p>​                通过类的类加载器</p>
<p>数组的类型维度一样，则是同一个Class</p>
<h4 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; c=Person.class;</span><br><span class="line">Person p=c.newInstance();</span><br><span class="line"></span><br><span class="line">newInstance()使用:</span><br><span class="line">					必须提供空参的构造器，权限默认为<span class="keyword">public</span></span><br><span class="line">                    </span><br></pre></td></tr></table></figure>









]]></content>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2020/10/26/%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>如果实现类覆盖了接口中所有的抽象方法，则此实现类可以实例化</p>
<p>没有则是抽象方法</p>
<p>接口与接口直接可以多继承</p>
<a id="more"></a>

<p>jdk7：只能定义全局变量和抽象方法</p>
<p>​            全局变量：public static final </p>
<p>​            抽象方法：public abstract</p>
<p>jdk8:</p>
<p>​            除了定义全局变量和抽象方法，还可以定义静态方法、默认方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">method();调用自己定义的重写的方法</span><br><span class="line">   <span class="keyword">super</span>.method():调用父类的</span><br><span class="line">   interface.<span class="keyword">super</span>.method()：调用接口的默认方法</span><br><span class="line">   interface.method():调用接口的静态方法    </span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/10/20/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="这是我用hexo写的第一篇博客"><a href="#这是我用hexo写的第一篇博客" class="headerlink" title="这是我用hexo写的第一篇博客"></a>这是我用hexo写的第一篇博客</h2>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>注解</title>
    <url>/2020/10/30/%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>jdk内置三个注解</p>
<p>1、@Override ：重写</p>
<p>2、@Deprecated：已过时</p>
<p>3、@SuppressWarnings：压制警告</p>
<a id="more"></a>

<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> jdk提供的四种元注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对现有的注解进行解释说明的注解</span><br><span class="line">1、@Retention:</span><br><span class="line">				生命周期 SOURCE\CLASS（默认）\RUNTIME</span><br><span class="line">2、@Target:</span><br><span class="line">				修饰范围 TYPE, FIELD, METHOD, PARAMETER,CONSTRUCTOR,   									LOCAL_VARIABLE, MODULE</span><br><span class="line">3、@Documented:</span><br><span class="line">				提取文档</span><br><span class="line">4、@Inherited:</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>javase</tag>
      </tags>
  </entry>
  <entry>
    <title>线程</title>
    <url>/2020/10/29/%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>进程：是程序的一次执行过程，资源分配的单位</p>
<p>线程：是调度与执行的单位，每个线程拥有独立的运行栈和程序计数器</p>
<a id="more"></a>

<h3 id="线程创建的方式"><a href="#线程创建的方式" class="headerlink" title="线程创建的方式"></a>线程创建的方式</h3><p>1.继承Thread类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        thread1 t1=<span class="keyword">new</span> thread1();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">继承Thread类，重写run方法，调用start方法</span><br></pre></td></tr></table></figure>

<p>2.实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建一个实现Runnable接口的类</span><br><span class="line">   实现类去实现Runnable中的抽象方法:run()</span><br><span class="line">   创建实现类的对象</span><br><span class="line">   将此对象作为参数传入Thread类的构造器中，再调用start()    </span><br></pre></td></tr></table></figure>

<p>3.实现Callable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">可以有返回值</span><br><span class="line">可以抛出异常</span><br><span class="line">支持泛型</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.使用线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService ex = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ex.submit(<span class="keyword">new</span> MyThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="Thread类的方法"><a href="#Thread类的方法" class="headerlink" title="Thread类的方法"></a>Thread类的方法</h6><p>start():启动当前线程，调用线程的run()方法</p>
<p>run():</p>
<p>currentThread():静态方法，返回执行当前代码线程</p>
<p>yield():释放当前cpu的执行权，重新抢夺</p>
<p>join():在A线程中调用B的join()，此时A线程就进入阻塞状态，等B线程执行完后，A才结束阻塞状态</p>
<h5 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h5><p>最大10，最小1，默认为5</p>
<p>getPriority()：获取当前线程的优先级</p>
<p>setPriority():设置当前线程的优先级（在start()之前设置）</p>
<h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NEW</span><br><span class="line">   RUNNABLE</span><br><span class="line">   BLOCKED</span><br><span class="line">   WAITING</span><br><span class="line">   TIMED_WAITTING</span><br><span class="line">   TERMINATED    </span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>锁的不同</title>
    <url>/2020/10/29/%E9%94%81%E7%9A%84%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<h3 id="synchonized-与lock的区别"><a href="#synchonized-与lock的区别" class="headerlink" title="synchonized 与lock的区别"></a>synchonized 与lock的区别</h3><p> 1、lock是一个接口，而synchronized是java的一个关键字 </p>
<p> 2、异常是否释放锁：</p>
<a id="more"></a>

<p>synchronized在发生异常时候会自动释放占有的锁，因此不会出现死锁；而lock发生异常时候，不会主动释放占有的锁，必须手动unlock来释放锁，可能引起死锁的发生。（所以最好将同步代码块用try catch包起来，finally中写入unlock，避免死锁的发生。） </p>
<p> 3、是否知道获取锁<br>Lock可以通过trylock来知道有没有获取锁，而synchronized不能； </p>
<p> 4、synchronized和lock的用法区别<br>synchronized：在需要同步的对象中加入此控制，synchronized可以加在方法上，也可以加在特定代码块中，括号中表示需要锁的对象。<br>普通同步方法，锁是当前实例对象<br>静态同步方法，锁是当前类的class对象<br>同步方法块，锁是括号里面的对象<br>lock：一般使用ReentrantLock类做为锁。在加锁和解锁处需要通过lock()和unlock()显示指出。所以一般会在finally块中写unlock()以防死锁。 </p>
<p> 5、2种机制的具体区别：<br>synchronized原始采用的是CPU悲观锁机制，即线程获得的是独占锁。独占锁意味着其他线程只能依靠阻塞来等待线程释放锁。而在CPU转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起CPU频繁的上下文切换导致效率很低；<br>而Lock用的是乐观锁方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。乐观锁实现的机制就是CAS操作（Compare and Swap） </p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代理，动态代理</title>
    <url>/2020/10/23/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p> Rent . java 即抽象角色 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<p>Host . java 即真实角色 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Proxy . java 即代理角色 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理角色：中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Host host;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//租房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       host.rent();</span><br><span class="line">       fare();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Client . java 即客户 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户类，一般客户都会去找代理！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//房东要租房</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">       <span class="comment">//中介帮助房东</span></span><br><span class="line">       Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//你去找中介！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p> 核心 : InvocationHandler   和   Proxy  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object invoke(Object proxy, 方法 method, Object[] args)；</span><br><span class="line">&#x2F;&#x2F;参数</span><br><span class="line">&#x2F;&#x2F;proxy - 调用该方法的代理实例</span><br><span class="line">&#x2F;&#x2F;method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><br><span class="line">&#x2F;&#x2F;args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生成代理类</span><br><span class="line">public Object getProxy()&#123;</span><br><span class="line">   return Proxy.newProxyInstance(this.getClass().getClassLoader(),</span><br><span class="line">                                 rent.getClass().getInterfaces(),this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong> </p>
<p>抽象角色和真实角色和之前的一样！</p>
<p>Rent . java 即抽象角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Host . java 即真实角色 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> ProxyInvocationHandler. java 即代理角色 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.rent = rent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">               rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line">   <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       <span class="comment">//核心：本质利用反射实现！</span></span><br><span class="line">       Object result = method.invoke(rent, args);</span><br><span class="line">       fare();</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Client . java </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//真实角色</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">       <span class="comment">//代理实例的调用处理程序</span></span><br><span class="line">       ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">       pih.setRent(host); <span class="comment">//将真实角色放置进去！</span></span><br><span class="line">       Rent proxy = (Rent)pih.getProxy(); <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，</strong></p>
<p>​    <strong>代理的是接口！、</strong></p>
]]></content>
      <tags>
        <tag>代理 spring</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2020/10/24/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Collection-常用功能"><a href="#Collection-常用功能" class="headerlink" title="Collection 常用功能"></a>Collection 常用功能</h1><p>Collection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p>
<ul>
<li><p><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</p>
</li>
<li><p><code>public void clear()</code> :清空集合中所有的元素。</p>
</li>
<li><p><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</p>
<a id="more"></a>
</li>
<li><p><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</p>
</li>
<li><p><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</p>
</li>
<li><p><code>public int size()</code>: 返回集合中元素的个数。</p>
</li>
<li><p><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</p>
</li>
</ul>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h3 id="ArrayList、LinkedList、vector三者异同"><a href="#ArrayList、LinkedList、vector三者异同" class="headerlink" title="ArrayList、LinkedList、vector三者异同"></a>ArrayList、LinkedList、vector三者异同</h3><p>同：都是List接口的实现类，存储是有序的，可存储重复数据</p>
<p>异：</p>
<p>​       ArrayList:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  jdk7</span><br><span class="line">底层使用 Object [ ] elementData 存储</span><br><span class="line">ArrayList arr=<span class="keyword">new</span> ArrayList(); <span class="comment">//创建长度10的 Object [ ] elementData</span></span><br><span class="line">长度超过<span class="number">10</span>自动扩容为<span class="number">1.5</span>倍   同时将原数组复制到新的数组中</span><br><span class="line">  jdk8</span><br><span class="line">   调用add方法 创建长度<span class="number">10</span>的 Object [ ] elementData</span><br><span class="line">    </span><br><span class="line"> 总结：jdk7类似饿汉式，jdk8类似懒汉式   </span><br></pre></td></tr></table></figure>



<p>​        LinkedList:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">底层使用双向链表</span><br><span class="line">Node&lt;前一个，本数据，后一个&gt;</span><br></pre></td></tr></table></figure>



<p>​      Vector:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vector  vector&#x3D;new  Vector(); &#x2F;&#x2F;创建长度10的 Object [ ] elementData</span><br><span class="line">底层Object [ ] elementData 线程安全</span><br><span class="line">synaized修饰</span><br><span class="line">扩容2倍</span><br></pre></td></tr></table></figure>

<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><h3 id="HashSet、LinkedHashSet、TreeSet"><a href="#HashSet、LinkedHashSet、TreeSet" class="headerlink" title="HashSet、LinkedHashSet、TreeSet"></a>HashSet、LinkedHashSet、TreeSet</h3><p>同：无序，不可重复，高中集合</p>
<p>HashSet：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程不安全，可以存储null</span><br><span class="line">添加a元素，调用hashCode()方法，计算hash值，再通过某种算法计算在数组所在的位置，判断是否有元素，如果有，比较hash值是否相等，相等比较equals()</span><br><span class="line">map----&gt;(key,new static final object())</span><br></pre></td></tr></table></figure>

<p>LinkedHashSet:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashset的子类，可按照添加顺序遍历</span><br></pre></td></tr></table></figure>

<p>TreeSet:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按照添加对象指定属性进行排序</span><br><span class="line">二叉树</span><br><span class="line">两种排序   </span><br><span class="line">			1、自然排序：实现Comparable接口   -----&gt;compareTo()</span><br><span class="line">			2、定制排序：实现Comparator接口   -----&gt;compare()</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>javase 集合</tag>
      </tags>
  </entry>
  <entry>
    <title>面经1</title>
    <url>/2021/01/01/%E9%9D%A2%E7%BB%8F1/</url>
    <content><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><h2 id="JDK1-7和JDK1-8中HashMap为什么是线程不安全的？"><a href="#JDK1-7和JDK1-8中HashMap为什么是线程不安全的？" class="headerlink" title="JDK1.7和JDK1.8中HashMap为什么是线程不安全的？"></a>JDK1.7和JDK1.8中HashMap为什么是线程不安全的？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HashMap的线程不安全体现在会造成死循环、数据丢失、数据覆盖这些问题。其中死循环和数据丢失是在JDK1.7中出现的问题，在JDK1.8中已经得到解决，然而1.8中仍会有数据覆盖这样的问题。</span><br><span class="line">  HashMap的线程不安全主要是发生在扩容函数中，即根源是在transfer函数中，</span><br><span class="line">  1.8的源码会发现找不到transfer函数，因为JDK1.8直接在resize函数中完成了数据迁移。另外说一句，JDK1.8在进行元素插入时使用的是尾插法。</span><br><span class="line">  HashMap的线程不安全主要体现在下面两个方面：</span><br><span class="line">    1.在JDK1.7中，当并发执行扩容操作时会造成环形链和数据丢失的情况。</span><br><span class="line">    2.在JDK1.8中，在并发执行put操作时会发生数据覆盖的情况。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你叫我去吃饭，我听到了就立刻和你去吃饭，如果我没有听到，你就会一直叫我，直到我听见和你一起去吃饭，这个过程叫同步；异步过程指你叫我去吃饭，然后你就去吃饭了，而不管我是否和你一起去吃饭。而我得到消息后可能立即就走，也可能过段时间再走。</span><br></pre></td></tr></table></figure>

<h2 id="Spring-IOC过程"><a href="#Spring-IOC过程" class="headerlink" title="Spring IOC过程"></a>Spring IOC过程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring加载bean过程(IOC过程)</span><br><span class="line">1.载入xml配置文件,通过xml文件构造BeanDefinition的Map(在DefaultListableBeanFactory中)</span><br><span class="line">2.实例化BeanFactoryPostProcessors类型的bean、调用postProcessBeanFactory方法修改BeanDefinition定义</span><br><span class="line">3.实例化BeanPostProcessor类型的bean</span><br><span class="line">4.实例化Singletons类型的bean(getBean方法)</span><br><span class="line">   1)调用构造方法实例化bean(如果是FactoryBean,则实例化ProxyFactoryBean类型的bean)</span><br><span class="line">   2)初始化属性(可能引起getBean的递归调用)</span><br><span class="line">   3)若实现Aware接口,调用接口方法</span><br><span class="line">   4)调用BeanPostProcessor的postProcessBeforeIniti和alization方法</span><br><span class="line">   5)若实现InitializingBean接口,调用接口afterPropertiesSet方法、调用init方法</span><br><span class="line">   6)调用BeanPostProcessor的postProcessAfterInitialization方法</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="线程间是如何通信的？"><a href="#线程间是如何通信的？" class="headerlink" title="线程间是如何通信的？"></a>线程间是如何通信的？</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用 thread.join() 方法</span><br><span class="line">利用 object.wait() 和 object.notify() 两个方法</span><br><span class="line">利用 CountdownLatch 来实现这类通信方式</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
</search>
